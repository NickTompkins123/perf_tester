

// Copyright (C) 2010-2012 Advanced Micro Devices, Inc. All Rights Reserved.


__constant float2 twiddles[511] = {
(float2)(1.0000000000000000000000000000000000f, -0.0000000000000000000000000000000000f),
(float2)(1.0000000000000000000000000000000000f, -0.0000000000000000000000000000000000f),
(float2)(1.0000000000000000000000000000000000f, -0.0000000000000000000000000000000000f),
(float2)(1.0000000000000000000000000000000000f, -0.0000000000000000000000000000000000f),
(float2)(1.0000000000000000000000000000000000f, -0.0000000000000000000000000000000000f),
(float2)(1.0000000000000000000000000000000000f, -0.0000000000000000000000000000000000f),
(float2)(1.0000000000000000000000000000000000f, -0.0000000000000000000000000000000000f),
(float2)(1.0000000000000000000000000000000000f, -0.0000000000000000000000000000000000f),
(float2)(1.0000000000000000000000000000000000f, -0.0000000000000000000000000000000000f),
(float2)(1.0000000000000000000000000000000000f, -0.0000000000000000000000000000000000f),
(float2)(1.0000000000000000000000000000000000f, -0.0000000000000000000000000000000000f),
(float2)(1.0000000000000000000000000000000000f, -0.0000000000000000000000000000000000f),
(float2)(1.0000000000000000000000000000000000f, -0.0000000000000000000000000000000000f),
(float2)(1.0000000000000000000000000000000000f, -0.0000000000000000000000000000000000f),
(float2)(0.9951847266721969300000000000000000f, -0.0980171403295606040000000000000000f),
(float2)(0.9807852804032304300000000000000000f, -0.1950903220161282500000000000000000f),
(float2)(0.9569403357322088200000000000000000f, -0.2902846772544623300000000000000000f),
(float2)(0.9238795325112867400000000000000000f, -0.3826834323650897800000000000000000f),
(float2)(0.8819212643483550500000000000000000f, -0.4713967368259976400000000000000000f),
(float2)(0.8314696123025452400000000000000000f, -0.5555702330196021800000000000000000f),
(float2)(0.7730104533627369900000000000000000f, -0.6343932841636454900000000000000000f),
(float2)(0.9807852804032304300000000000000000f, -0.1950903220161282500000000000000000f),
(float2)(0.9238795325112867400000000000000000f, -0.3826834323650897800000000000000000f),
(float2)(0.8314696123025452400000000000000000f, -0.5555702330196021800000000000000000f),
(float2)(0.7071067811865475700000000000000000f, -0.7071067811865474600000000000000000f),
(float2)(0.5555702330196022900000000000000000f, -0.8314696123025452400000000000000000f),
(float2)(0.3826834323650898400000000000000000f, -0.9238795325112867400000000000000000f),
(float2)(0.1950903220161283300000000000000000f, -0.9807852804032304300000000000000000f),
(float2)(0.9569403357322088200000000000000000f, -0.2902846772544623300000000000000000f),
(float2)(0.8314696123025452400000000000000000f, -0.5555702330196021800000000000000000f),
(float2)(0.6343932841636454900000000000000000f, -0.7730104533627368800000000000000000f),
(float2)(0.3826834323650898400000000000000000f, -0.9238795325112867400000000000000000f),
(float2)(0.0980171403295607700000000000000000f, -0.9951847266721968200000000000000000f),
(float2)(-0.1950903220161281900000000000000000f, -0.9807852804032304300000000000000000f),
(float2)(-0.4713967368259977000000000000000000f, -0.8819212643483550500000000000000000f),
(float2)(0.9238795325112867400000000000000000f, -0.3826834323650897800000000000000000f),
(float2)(0.7071067811865475700000000000000000f, -0.7071067811865474600000000000000000f),
(float2)(0.3826834323650898400000000000000000f, -0.9238795325112867400000000000000000f),
(float2)(0.0000000000000000612323399573676600f, -1.0000000000000000000000000000000000f),
(float2)(-0.3826834323650897300000000000000000f, -0.9238795325112867400000000000000000f),
(float2)(-0.7071067811865474600000000000000000f, -0.7071067811865475700000000000000000f),
(float2)(-0.9238795325112867400000000000000000f, -0.3826834323650898900000000000000000f),
(float2)(0.8819212643483550500000000000000000f, -0.4713967368259976400000000000000000f),
(float2)(0.5555702330196022900000000000000000f, -0.8314696123025452400000000000000000f),
(float2)(0.0980171403295607700000000000000000f, -0.9951847266721968200000000000000000f),
(float2)(-0.3826834323650897300000000000000000f, -0.9238795325112867400000000000000000f),
(float2)(-0.7730104533627369900000000000000000f, -0.6343932841636454900000000000000000f),
(float2)(-0.9807852804032304300000000000000000f, -0.1950903220161286100000000000000000f),
(float2)(-0.9569403357322089400000000000000000f, 0.2902846772544621100000000000000000f),
(float2)(0.8314696123025452400000000000000000f, -0.5555702330196021800000000000000000f),
(float2)(0.3826834323650898400000000000000000f, -0.9238795325112867400000000000000000f),
(float2)(-0.1950903220161281900000000000000000f, -0.9807852804032304300000000000000000f),
(float2)(-0.7071067811865474600000000000000000f, -0.7071067811865475700000000000000000f),
(float2)(-0.9807852804032304300000000000000000f, -0.1950903220161286100000000000000000f),
(float2)(-0.9238795325112868500000000000000000f, 0.3826834323650896200000000000000000f),
(float2)(-0.5555702330196021800000000000000000f, 0.8314696123025452400000000000000000f),
(float2)(0.7730104533627369900000000000000000f, -0.6343932841636454900000000000000000f),
(float2)(0.1950903220161283300000000000000000f, -0.9807852804032304300000000000000000f),
(float2)(-0.4713967368259977000000000000000000f, -0.8819212643483550500000000000000000f),
(float2)(-0.9238795325112867400000000000000000f, -0.3826834323650898900000000000000000f),
(float2)(-0.9569403357322089400000000000000000f, 0.2902846772544621100000000000000000f),
(float2)(-0.5555702330196021800000000000000000f, 0.8314696123025452400000000000000000f),
(float2)(0.0980171403295600900000000000000000f, 0.9951847266721969300000000000000000f),
(float2)(1.0000000000000000000000000000000000f, -0.0000000000000000000000000000000000f),
(float2)(1.0000000000000000000000000000000000f, -0.0000000000000000000000000000000000f),
(float2)(1.0000000000000000000000000000000000f, -0.0000000000000000000000000000000000f),
(float2)(1.0000000000000000000000000000000000f, -0.0000000000000000000000000000000000f),
(float2)(1.0000000000000000000000000000000000f, -0.0000000000000000000000000000000000f),
(float2)(1.0000000000000000000000000000000000f, -0.0000000000000000000000000000000000f),
(float2)(1.0000000000000000000000000000000000f, -0.0000000000000000000000000000000000f),
(float2)(0.9999247018391445000000000000000000f, -0.0122715382857199250000000000000000f),
(float2)(0.9996988186962042500000000000000000f, -0.0245412285229122880000000000000000f),
(float2)(0.9993223845883495400000000000000000f, -0.0368072229413588320000000000000000f),
(float2)(0.9987954562051724100000000000000000f, -0.0490676743274180150000000000000000f),
(float2)(0.9981181129001491800000000000000000f, -0.0613207363022085780000000000000000f),
(float2)(0.9972904566786902100000000000000000f, -0.0735645635996674260000000000000000f),
(float2)(0.9963126121827780000000000000000000f, -0.0857973123444398940000000000000000f),
(float2)(0.9996988186962042500000000000000000f, -0.0245412285229122880000000000000000f),
(float2)(0.9987954562051724100000000000000000f, -0.0490676743274180150000000000000000f),
(float2)(0.9972904566786902100000000000000000f, -0.0735645635996674260000000000000000f),
(float2)(0.9951847266721969300000000000000000f, -0.0980171403295606040000000000000000f),
(float2)(0.9924795345987099700000000000000000f, -0.1224106751992162000000000000000000f),
(float2)(0.9891765099647810100000000000000000f, -0.1467304744553617500000000000000000f),
(float2)(0.9852776423889412200000000000000000f, -0.1709618887603012200000000000000000f),
(float2)(0.9993223845883495400000000000000000f, -0.0368072229413588320000000000000000f),
(float2)(0.9972904566786902100000000000000000f, -0.0735645635996674260000000000000000f),
(float2)(0.9939069700023560600000000000000000f, -0.1102222072938830600000000000000000f),
(float2)(0.9891765099647810100000000000000000f, -0.1467304744553617500000000000000000f),
(float2)(0.9831054874312162900000000000000000f, -0.1830398879551409500000000000000000f),
(float2)(0.9757021300385285700000000000000000f, -0.2191012401568698000000000000000000f),
(float2)(0.9669764710448520700000000000000000f, -0.2548656596045145700000000000000000f),
(float2)(0.9987954562051724100000000000000000f, -0.0490676743274180150000000000000000f),
(float2)(0.9951847266721969300000000000000000f, -0.0980171403295606040000000000000000f),
(float2)(0.9891765099647810100000000000000000f, -0.1467304744553617500000000000000000f),
(float2)(0.9807852804032304300000000000000000f, -0.1950903220161282500000000000000000f),
(float2)(0.9700312531945439700000000000000000f, -0.2429801799032638700000000000000000f),
(float2)(0.9569403357322088200000000000000000f, -0.2902846772544623300000000000000000f),
(float2)(0.9415440651830208100000000000000000f, -0.3368898533922200500000000000000000f),
(float2)(0.9981181129001491800000000000000000f, -0.0613207363022085780000000000000000f),
(float2)(0.9924795345987099700000000000000000f, -0.1224106751992162000000000000000000f),
(float2)(0.9831054874312162900000000000000000f, -0.1830398879551409500000000000000000f),
(float2)(0.9700312531945439700000000000000000f, -0.2429801799032638700000000000000000f),
(float2)(0.9533060403541938600000000000000000f, -0.3020059493192280800000000000000000f),
(float2)(0.9329927988347389600000000000000000f, -0.3598950365349881100000000000000000f),
(float2)(0.9091679830905223800000000000000000f, -0.4164295600976371500000000000000000f),
(float2)(0.9972904566786902100000000000000000f, -0.0735645635996674260000000000000000f),
(float2)(0.9891765099647810100000000000000000f, -0.1467304744553617500000000000000000f),
(float2)(0.9757021300385285700000000000000000f, -0.2191012401568698000000000000000000f),
(float2)(0.9569403357322088200000000000000000f, -0.2902846772544623300000000000000000f),
(float2)(0.9329927988347389600000000000000000f, -0.3598950365349881100000000000000000f),
(float2)(0.9039892931234433400000000000000000f, -0.4275550934302820800000000000000000f),
(float2)(0.8700869911087114600000000000000000f, -0.4928981922297840400000000000000000f),
(float2)(0.9963126121827780000000000000000000f, -0.0857973123444398940000000000000000f),
(float2)(0.9852776423889412200000000000000000f, -0.1709618887603012200000000000000000f),
(float2)(0.9669764710448520700000000000000000f, -0.2548656596045145700000000000000000f),
(float2)(0.9415440651830208100000000000000000f, -0.3368898533922200500000000000000000f),
(float2)(0.9091679830905223800000000000000000f, -0.4164295600976371500000000000000000f),
(float2)(0.8700869911087114600000000000000000f, -0.4928981922297840400000000000000000f),
(float2)(0.8245893027850252900000000000000000f, -0.5657318107836131200000000000000000f),
(float2)(0.9951847266721969300000000000000000f, -0.0980171403295606040000000000000000f),
(float2)(0.9807852804032304300000000000000000f, -0.1950903220161282500000000000000000f),
(float2)(0.9569403357322088200000000000000000f, -0.2902846772544623300000000000000000f),
(float2)(0.9238795325112867400000000000000000f, -0.3826834323650897800000000000000000f),
(float2)(0.8819212643483550500000000000000000f, -0.4713967368259976400000000000000000f),
(float2)(0.8314696123025452400000000000000000f, -0.5555702330196021800000000000000000f),
(float2)(0.7730104533627369900000000000000000f, -0.6343932841636454900000000000000000f),
(float2)(0.9939069700023560600000000000000000f, -0.1102222072938830600000000000000000f),
(float2)(0.9757021300385285700000000000000000f, -0.2191012401568698000000000000000000f),
(float2)(0.9456073253805212800000000000000000f, -0.3253102921622629300000000000000000f),
(float2)(0.9039892931234433400000000000000000f, -0.4275550934302820800000000000000000f),
(float2)(0.8513551931052652000000000000000000f, -0.5245896826784689500000000000000000f),
(float2)(0.7883464276266063400000000000000000f, -0.6152315905806268200000000000000000f),
(float2)(0.7157308252838185900000000000000000f, -0.6983762494089729200000000000000000f),
(float2)(0.9924795345987099700000000000000000f, -0.1224106751992162000000000000000000f),
(float2)(0.9700312531945439700000000000000000f, -0.2429801799032638700000000000000000f),
(float2)(0.9329927988347389600000000000000000f, -0.3598950365349881100000000000000000f),
(float2)(0.8819212643483550500000000000000000f, -0.4713967368259976400000000000000000f),
(float2)(0.8175848131515837100000000000000000f, -0.5758081914178453400000000000000000f),
(float2)(0.7409511253549592200000000000000000f, -0.6715589548470183300000000000000000f),
(float2)(0.6531728429537768700000000000000000f, -0.7572088465064845700000000000000000f),
(float2)(0.9909026354277800100000000000000000f, -0.1345807085071261700000000000000000f),
(float2)(0.9637760657954398400000000000000000f, -0.2667127574748983700000000000000000f),
(float2)(0.9191138516900577700000000000000000f, -0.3939920400610480400000000000000000f),
(float2)(0.8577286100002721200000000000000000f, -0.5141027441932216600000000000000000f),
(float2)(0.7807372285720944900000000000000000f, -0.6248594881423863400000000000000000f),
(float2)(0.6895405447370670500000000000000000f, -0.7242470829514668900000000000000000f),
(float2)(0.5857978574564389800000000000000000f, -0.8104571982525947700000000000000000f),
(float2)(0.9891765099647810100000000000000000f, -0.1467304744553617500000000000000000f),
(float2)(0.9569403357322088200000000000000000f, -0.2902846772544623300000000000000000f),
(float2)(0.9039892931234433400000000000000000f, -0.4275550934302820800000000000000000f),
(float2)(0.8314696123025452400000000000000000f, -0.5555702330196021800000000000000000f),
(float2)(0.7409511253549592200000000000000000f, -0.6715589548470183300000000000000000f),
(float2)(0.6343932841636454900000000000000000f, -0.7730104533627368800000000000000000f),
(float2)(0.5141027441932216600000000000000000f, -0.8577286100002721200000000000000000f),
(float2)(0.9873014181578584300000000000000000f, -0.1588581433338614500000000000000000f),
(float2)(0.9495281805930366700000000000000000f, -0.3136817403988915200000000000000000f),
(float2)(0.8876396204028539300000000000000000f, -0.4605387109582400600000000000000000f),
(float2)(0.8032075314806449400000000000000000f, -0.5956993044924333600000000000000000f),
(float2)(0.6983762494089728000000000000000000f, -0.7157308252838187100000000000000000f),
(float2)(0.5758081914178452300000000000000000f, -0.8175848131515837100000000000000000f),
(float2)(0.4386162385385274900000000000000000f, -0.8986744656939539300000000000000000f),
(float2)(0.9852776423889412200000000000000000f, -0.1709618887603012200000000000000000f),
(float2)(0.9415440651830208100000000000000000f, -0.3368898533922200500000000000000000f),
(float2)(0.8700869911087114600000000000000000f, -0.4928981922297840400000000000000000f),
(float2)(0.7730104533627369900000000000000000f, -0.6343932841636454900000000000000000f),
(float2)(0.6531728429537768700000000000000000f, -0.7572088465064845700000000000000000f),
(float2)(0.5141027441932216600000000000000000f, -0.8577286100002721200000000000000000f),
(float2)(0.3598950365349882800000000000000000f, -0.9329927988347388500000000000000000f),
(float2)(0.9831054874312162900000000000000000f, -0.1830398879551409500000000000000000f),
(float2)(0.9329927988347389600000000000000000f, -0.3598950365349881100000000000000000f),
(float2)(0.8513551931052652000000000000000000f, -0.5245896826784688400000000000000000f),
(float2)(0.7409511253549592200000000000000000f, -0.6715589548470183300000000000000000f),
(float2)(0.6055110414043255500000000000000000f, -0.7958369046088834600000000000000000f),
(float2)(0.4496113296546068200000000000000000f, -0.8932243011955152100000000000000000f),
(float2)(0.2785196893850532800000000000000000f, -0.9604305194155657900000000000000000f),
(float2)(0.9807852804032304300000000000000000f, -0.1950903220161282500000000000000000f),
(float2)(0.9238795325112867400000000000000000f, -0.3826834323650897800000000000000000f),
(float2)(0.8314696123025452400000000000000000f, -0.5555702330196021800000000000000000f),
(float2)(0.7071067811865475700000000000000000f, -0.7071067811865474600000000000000000f),
(float2)(0.5555702330196022900000000000000000f, -0.8314696123025452400000000000000000f),
(float2)(0.3826834323650898400000000000000000f, -0.9238795325112867400000000000000000f),
(float2)(0.1950903220161283300000000000000000f, -0.9807852804032304300000000000000000f),
(float2)(0.9783173707196276500000000000000000f, -0.2071113761922185600000000000000000f),
(float2)(0.9142097557035306900000000000000000f, -0.4052413140049898600000000000000000f),
(float2)(0.8104571982525947700000000000000000f, -0.5857978574564388600000000000000000f),
(float2)(0.6715589548470183300000000000000000f, -0.7409511253549591100000000000000000f),
(float2)(0.5035383837257175800000000000000000f, -0.8639728561215867000000000000000000f),
(float2)(0.3136817403988913500000000000000000f, -0.9495281805930366700000000000000000f),
(float2)(0.1102222072938829600000000000000000f, -0.9939069700023560600000000000000000f),
(float2)(0.9757021300385285700000000000000000f, -0.2191012401568698000000000000000000f),
(float2)(0.9039892931234433400000000000000000f, -0.4275550934302820800000000000000000f),
(float2)(0.7883464276266063400000000000000000f, -0.6152315905806268200000000000000000f),
(float2)(0.6343932841636454900000000000000000f, -0.7730104533627368800000000000000000f),
(float2)(0.4496113296546066000000000000000000f, -0.8932243011955153200000000000000000f),
(float2)(0.2429801799032639800000000000000000f, -0.9700312531945439700000000000000000f),
(float2)(0.0245412285229122640000000000000000f, -0.9996988186962042500000000000000000f),
(float2)(0.9729399522055601800000000000000000f, -0.2310581082806711100000000000000000f),
(float2)(0.8932243011955153200000000000000000f, -0.4496113296546065400000000000000000f),
(float2)(0.7651672656224589600000000000000000f, -0.6438315428897913900000000000000000f),
(float2)(0.5956993044924334700000000000000000f, -0.8032075314806448300000000000000000f),
(float2)(0.3939920400610481000000000000000000f, -0.9191138516900577700000000000000000f),
(float2)(0.1709618887603013600000000000000000f, -0.9852776423889412200000000000000000f),
(float2)(-0.0613207363022083080000000000000000f, -0.9981181129001491800000000000000000f),
(float2)(0.9700312531945439700000000000000000f, -0.2429801799032638700000000000000000f),
(float2)(0.8819212643483550500000000000000000f, -0.4713967368259976400000000000000000f),
(float2)(0.7409511253549592200000000000000000f, -0.6715589548470183300000000000000000f),
(float2)(0.5555702330196022900000000000000000f, -0.8314696123025452400000000000000000f),
(float2)(0.3368898533922200500000000000000000f, -0.9415440651830208100000000000000000f),
(float2)(0.0980171403295607700000000000000000f, -0.9951847266721968200000000000000000f),
(float2)(-0.1467304744553616400000000000000000f, -0.9891765099647810100000000000000000f),
(float2)(0.9669764710448520700000000000000000f, -0.2548656596045145700000000000000000f),
(float2)(0.8700869911087114600000000000000000f, -0.4928981922297840400000000000000000f),
(float2)(0.7157308252838185900000000000000000f, -0.6983762494089729200000000000000000f),
(float2)(0.5141027441932216600000000000000000f, -0.8577286100002721200000000000000000f),
(float2)(0.2785196893850530600000000000000000f, -0.9604305194155657900000000000000000f),
(float2)(0.0245412285229122640000000000000000f, -0.9996988186962042500000000000000000f),
(float2)(-0.2310581082806711400000000000000000f, -0.9729399522055601800000000000000000f),
(float2)(0.9637760657954398400000000000000000f, -0.2667127574748983700000000000000000f),
(float2)(0.8577286100002721200000000000000000f, -0.5141027441932216600000000000000000f),
(float2)(0.6895405447370670500000000000000000f, -0.7242470829514668900000000000000000f),
(float2)(0.4713967368259978100000000000000000f, -0.8819212643483549400000000000000000f),
(float2)(0.2191012401568699900000000000000000f, -0.9757021300385284600000000000000000f),
(float2)(-0.0490676743274177860000000000000000f, -0.9987954562051724100000000000000000f),
(float2)(-0.3136817403988912400000000000000000f, -0.9495281805930367900000000000000000f),
(float2)(0.9604305194155657900000000000000000f, -0.2785196893850530600000000000000000f),
(float2)(0.8448535652497071200000000000000000f, -0.5349976198870971500000000000000000f),
(float2)(0.6624157775901717800000000000000000f, -0.7491363945234592600000000000000000f),
(float2)(0.4275550934302822000000000000000000f, -0.9039892931234433400000000000000000f),
(float2)(0.1588581433338616100000000000000000f, -0.9873014181578583200000000000000000f),
(float2)(-0.1224106751992161500000000000000000f, -0.9924795345987099700000000000000000f),
(float2)(-0.3939920400610479900000000000000000f, -0.9191138516900577700000000000000000f),
(float2)(0.9569403357322088200000000000000000f, -0.2902846772544623300000000000000000f),
(float2)(0.8314696123025452400000000000000000f, -0.5555702330196021800000000000000000f),
(float2)(0.6343932841636454900000000000000000f, -0.7730104533627368800000000000000000f),
(float2)(0.3826834323650898400000000000000000f, -0.9238795325112867400000000000000000f),
(float2)(0.0980171403295607700000000000000000f, -0.9951847266721968200000000000000000f),
(float2)(-0.1950903220161281900000000000000000f, -0.9807852804032304300000000000000000f),
(float2)(-0.4713967368259977000000000000000000f, -0.8819212643483550500000000000000000f),
(float2)(0.9533060403541938600000000000000000f, -0.3020059493192280800000000000000000f),
(float2)(0.8175848131515837100000000000000000f, -0.5758081914178453400000000000000000f),
(float2)(0.6055110414043255500000000000000000f, -0.7958369046088834600000000000000000f),
(float2)(0.3368898533922200500000000000000000f, -0.9415440651830208100000000000000000f),
(float2)(0.0368072229413587690000000000000000f, -0.9993223845883495400000000000000000f),
(float2)(-0.2667127574748983100000000000000000f, -0.9637760657954398400000000000000000f),
(float2)(-0.5453249884220465700000000000000000f, -0.8382247055548379700000000000000000f),
(float2)(0.9495281805930366700000000000000000f, -0.3136817403988915200000000000000000f),
(float2)(0.8032075314806449400000000000000000f, -0.5956993044924333600000000000000000f),
(float2)(0.5758081914178452300000000000000000f, -0.8175848131515837100000000000000000f),
(float2)(0.2902846772544623300000000000000000f, -0.9569403357322089400000000000000000f),
(float2)(-0.0245412285229123640000000000000000f, -0.9996988186962042500000000000000000f),
(float2)(-0.3368898533922201600000000000000000f, -0.9415440651830207000000000000000000f),
(float2)(-0.6152315905806271500000000000000000f, -0.7883464276266060100000000000000000f),
(float2)(0.9456073253805212800000000000000000f, -0.3253102921622629300000000000000000f),
(float2)(0.7883464276266063400000000000000000f, -0.6152315905806268200000000000000000f),
(float2)(0.5453249884220464600000000000000000f, -0.8382247055548379700000000000000000f),
(float2)(0.2429801799032639800000000000000000f, -0.9700312531945439700000000000000000f),
(float2)(-0.0857973123444397550000000000000000f, -0.9963126121827780000000000000000000f),
(float2)(-0.4052413140049897500000000000000000f, -0.9142097557035306900000000000000000f),
(float2)(-0.6806009977954526900000000000000000f, -0.7326542716724130400000000000000000f),
(float2)(0.9415440651830208100000000000000000f, -0.3368898533922200500000000000000000f),
(float2)(0.7730104533627369900000000000000000f, -0.6343932841636454900000000000000000f),
(float2)(0.5141027441932216600000000000000000f, -0.8577286100002721200000000000000000f),
(float2)(0.1950903220161283300000000000000000f, -0.9807852804032304300000000000000000f),
(float2)(-0.1467304744553616400000000000000000f, -0.9891765099647810100000000000000000f),
(float2)(-0.4713967368259977000000000000000000f, -0.8819212643483550500000000000000000f),
(float2)(-0.7409511253549588800000000000000000f, -0.6715589548470185500000000000000000f),
(float2)(0.9373390119125749600000000000000000f, -0.3484186802494345600000000000000000f),
(float2)(0.7572088465064845700000000000000000f, -0.6531728429537767600000000000000000f),
(float2)(0.4821837720791228300000000000000000f, -0.8760700941954066000000000000000000f),
(float2)(0.1467304744553617500000000000000000f, -0.9891765099647810100000000000000000f),
(float2)(-0.2071113761922186700000000000000000f, -0.9783173707196276500000000000000000f),
(float2)(-0.5349976198870970400000000000000000f, -0.8448535652497072300000000000000000f),
(float2)(-0.7958369046088834600000000000000000f, -0.6055110414043256600000000000000000f),
(float2)(0.9329927988347389600000000000000000f, -0.3598950365349881100000000000000000f),
(float2)(0.7409511253549592200000000000000000f, -0.6715589548470183300000000000000000f),
(float2)(0.4496113296546068200000000000000000f, -0.8932243011955152100000000000000000f),
(float2)(0.0980171403295607700000000000000000f, -0.9951847266721968200000000000000000f),
(float2)(-0.2667127574748983100000000000000000f, -0.9637760657954398400000000000000000f),
(float2)(-0.5956993044924329100000000000000000f, -0.8032075314806451600000000000000000f),
(float2)(-0.8448535652497068900000000000000000f, -0.5349976198870976000000000000000000f),
(float2)(0.9285060804732155900000000000000000f, -0.3713171939518375400000000000000000f),
(float2)(0.7242470829514670000000000000000000f, -0.6895405447370668300000000000000000f),
(float2)(0.4164295600976373200000000000000000f, -0.9091679830905222700000000000000000f),
(float2)(0.0490676743274181260000000000000000f, -0.9987954562051724100000000000000000f),
(float2)(-0.3253102921622628700000000000000000f, -0.9456073253805213900000000000000000f),
(float2)(-0.6531728429537765300000000000000000f, -0.7572088465064846800000000000000000f),
(float2)(-0.8876396204028538200000000000000000f, -0.4605387109582402300000000000000000f),
(float2)(0.9238795325112867400000000000000000f, -0.3826834323650897800000000000000000f),
(float2)(0.7071067811865475700000000000000000f, -0.7071067811865474600000000000000000f),
(float2)(0.3826834323650898400000000000000000f, -0.9238795325112867400000000000000000f),
(float2)(0.0000000000000000612323399573676600f, -1.0000000000000000000000000000000000f),
(float2)(-0.3826834323650897300000000000000000f, -0.9238795325112867400000000000000000f),
(float2)(-0.7071067811865474600000000000000000f, -0.7071067811865475700000000000000000f),
(float2)(-0.9238795325112867400000000000000000f, -0.3826834323650898900000000000000000f),
(float2)(0.9191138516900577700000000000000000f, -0.3939920400610481000000000000000000f),
(float2)(0.6895405447370668300000000000000000f, -0.7242470829514668900000000000000000f),
(float2)(0.3484186802494345100000000000000000f, -0.9373390119125749600000000000000000f),
(float2)(-0.0490676743274180080000000000000000f, -0.9987954562051724100000000000000000f),
(float2)(-0.4386162385385277700000000000000000f, -0.8986744656939538200000000000000000f),
(float2)(-0.7572088465064846800000000000000000f, -0.6531728429537766400000000000000000f),
(float2)(-0.9533060403541938600000000000000000f, -0.3020059493192280300000000000000000f),
(float2)(0.9142097557035306900000000000000000f, -0.4052413140049898600000000000000000f),
(float2)(0.6715589548470183300000000000000000f, -0.7409511253549591100000000000000000f),
(float2)(0.3136817403988913500000000000000000f, -0.9495281805930366700000000000000000f),
(float2)(-0.0980171403295606450000000000000000f, -0.9951847266721969300000000000000000f),
(float2)(-0.4928981922297839800000000000000000f, -0.8700869911087114600000000000000000f),
(float2)(-0.8032075314806450500000000000000000f, -0.5956993044924331300000000000000000f),
(float2)(-0.9757021300385285700000000000000000f, -0.2191012401568696000000000000000000f),
(float2)(0.9091679830905223800000000000000000f, -0.4164295600976371500000000000000000f),
(float2)(0.6531728429537768700000000000000000f, -0.7572088465064845700000000000000000f),
(float2)(0.2785196893850530600000000000000000f, -0.9604305194155657900000000000000000f),
(float2)(-0.1467304744553616400000000000000000f, -0.9891765099647810100000000000000000f),
(float2)(-0.5453249884220462400000000000000000f, -0.8382247055548381900000000000000000f),
(float2)(-0.8448535652497071200000000000000000f, -0.5349976198870971500000000000000000f),
(float2)(-0.9909026354277800100000000000000000f, -0.1345807085071262800000000000000000f),
(float2)(0.9039892931234433400000000000000000f, -0.4275550934302820800000000000000000f),
(float2)(0.6343932841636454900000000000000000f, -0.7730104533627368800000000000000000f),
(float2)(0.2429801799032639800000000000000000f, -0.9700312531945439700000000000000000f),
(float2)(-0.1950903220161281900000000000000000f, -0.9807852804032304300000000000000000f),
(float2)(-0.5956993044924333600000000000000000f, -0.8032075314806449400000000000000000f),
(float2)(-0.8819212643483549400000000000000000f, -0.4713967368259978100000000000000000f),
(float2)(-0.9987954562051724100000000000000000f, -0.0490676743274179660000000000000000f),
(float2)(0.8986744656939538200000000000000000f, -0.4386162385385276600000000000000000f),
(float2)(0.6152315905806268200000000000000000f, -0.7883464276266062300000000000000000f),
(float2)(0.2071113761922185600000000000000000f, -0.9783173707196276500000000000000000f),
(float2)(-0.2429801799032638700000000000000000f, -0.9700312531945439700000000000000000f),
(float2)(-0.6438315428897912800000000000000000f, -0.7651672656224590700000000000000000f),
(float2)(-0.9142097557035306900000000000000000f, -0.4052413140049899200000000000000000f),
(float2)(-0.9993223845883495400000000000000000f, 0.0368072229413590260000000000000000f),
(float2)(0.8932243011955153200000000000000000f, -0.4496113296546065400000000000000000f),
(float2)(0.5956993044924334700000000000000000f, -0.8032075314806448300000000000000000f),
(float2)(0.1709618887603013600000000000000000f, -0.9852776423889412200000000000000000f),
(float2)(-0.2902846772544621600000000000000000f, -0.9569403357322089400000000000000000f),
(float2)(-0.6895405447370669400000000000000000f, -0.7242470829514668900000000000000000f),
(float2)(-0.9415440651830207000000000000000000f, -0.3368898533922203300000000000000000f),
(float2)(-0.9924795345987100800000000000000000f, 0.1224106751992156500000000000000000f),
(float2)(0.8876396204028539300000000000000000f, -0.4605387109582400100000000000000000f),
(float2)(0.5758081914178453400000000000000000f, -0.8175848131515837100000000000000000f),
(float2)(0.1345807085071262200000000000000000f, -0.9909026354277800100000000000000000f),
(float2)(-0.3368898533922199400000000000000000f, -0.9415440651830208100000000000000000f),
(float2)(-0.7326542716724127000000000000000000f, -0.6806009977954532400000000000000000f),
(float2)(-0.9637760657954398400000000000000000f, -0.2667127574748984800000000000000000f),
(float2)(-0.9783173707196277700000000000000000f, 0.2071113761922181700000000000000000f),
(float2)(0.8819212643483550500000000000000000f, -0.4713967368259976400000000000000000f),
(float2)(0.5555702330196022900000000000000000f, -0.8314696123025452400000000000000000f),
(float2)(0.0980171403295607700000000000000000f, -0.9951847266721968200000000000000000f),
(float2)(-0.3826834323650897300000000000000000f, -0.9238795325112867400000000000000000f),
(float2)(-0.7730104533627369900000000000000000f, -0.6343932841636454900000000000000000f),
(float2)(-0.9807852804032304300000000000000000f, -0.1950903220161286100000000000000000f),
(float2)(-0.9569403357322089400000000000000000f, 0.2902846772544621100000000000000000f),
(float2)(0.8760700941954066000000000000000000f, -0.4821837720791226600000000000000000f),
(float2)(0.5349976198870972600000000000000000f, -0.8448535652497070100000000000000000f),
(float2)(0.0613207363022088700000000000000000f, -0.9981181129001491800000000000000000f),
(float2)(-0.4275550934302818600000000000000000f, -0.9039892931234434500000000000000000f),
(float2)(-0.8104571982525946600000000000000000f, -0.5857978574564389800000000000000000f),
(float2)(-0.9924795345987099700000000000000000f, -0.1224106751992167800000000000000000f),
(float2)(-0.9285060804732158100000000000000000f, 0.3713171939518370400000000000000000f),
(float2)(0.8700869911087114600000000000000000f, -0.4928981922297840400000000000000000f),
(float2)(0.5141027441932216600000000000000000f, -0.8577286100002721200000000000000000f),
(float2)(0.0245412285229122640000000000000000f, -0.9996988186962042500000000000000000f),
(float2)(-0.4713967368259977000000000000000000f, -0.8819212643483550500000000000000000f),
(float2)(-0.8448535652497071200000000000000000f, -0.5349976198870971500000000000000000f),
(float2)(-0.9987954562051724100000000000000000f, -0.0490676743274179660000000000000000f),
(float2)(-0.8932243011955153200000000000000000f, 0.4496113296546066500000000000000000f),
(float2)(0.8639728561215867000000000000000000f, -0.5035383837257174600000000000000000f),
(float2)(0.4928981922297840900000000000000000f, -0.8700869911087113500000000000000000f),
(float2)(-0.0122715382857198230000000000000000f, -0.9999247018391445000000000000000000f),
(float2)(-0.5141027441932215500000000000000000f, -0.8577286100002721200000000000000000f),
(float2)(-0.8760700941954064900000000000000000f, -0.4821837720791228900000000000000000f),
(float2)(-0.9996988186962042500000000000000000f, 0.0245412285229120800000000000000000f),
(float2)(-0.8513551931052653100000000000000000f, 0.5245896826784687300000000000000000f),
(float2)(0.8577286100002721200000000000000000f, -0.5141027441932216600000000000000000f),
(float2)(0.4713967368259978100000000000000000f, -0.8819212643483549400000000000000000f),
(float2)(-0.0490676743274177860000000000000000f, -0.9987954562051724100000000000000000f),
(float2)(-0.5555702330196019600000000000000000f, -0.8314696123025453500000000000000000f),
(float2)(-0.9039892931234431200000000000000000f, -0.4275550934302824200000000000000000f),
(float2)(-0.9951847266721969300000000000000000f, 0.0980171403295601460000000000000000f),
(float2)(-0.8032075314806451600000000000000000f, 0.5956993044924329100000000000000000f),
(float2)(0.8513551931052652000000000000000000f, -0.5245896826784689500000000000000000f),
(float2)(0.4496113296546066000000000000000000f, -0.8932243011955153200000000000000000f),
(float2)(-0.0857973123444399770000000000000000f, -0.9963126121827780000000000000000000f),
(float2)(-0.5956993044924333600000000000000000f, -0.8032075314806449400000000000000000f),
(float2)(-0.9285060804732154800000000000000000f, -0.3713171939518377100000000000000000f),
(float2)(-0.9852776423889412200000000000000000f, 0.1709618887603014100000000000000000f),
(float2)(-0.7491363945234592600000000000000000f, 0.6624157775901717800000000000000000f),
(float2)(0.8448535652497071200000000000000000f, -0.5349976198870971500000000000000000f),
(float2)(0.4275550934302822000000000000000000f, -0.9039892931234433400000000000000000f),
(float2)(-0.1224106751992161500000000000000000f, -0.9924795345987099700000000000000000f),
(float2)(-0.6343932841636453800000000000000000f, -0.7730104533627371000000000000000000f),
(float2)(-0.9495281805930365600000000000000000f, -0.3136817403988918000000000000000000f),
(float2)(-0.9700312531945439700000000000000000f, 0.2429801799032638200000000000000000f),
(float2)(-0.6895405447370670500000000000000000f, 0.7242470829514667800000000000000000f),
(float2)(0.8382247055548380800000000000000000f, -0.5453249884220464600000000000000000f),
(float2)(0.4052413140049898600000000000000000f, -0.9142097557035306900000000000000000f),
(float2)(-0.1588581433338615000000000000000000f, -0.9873014181578583200000000000000000f),
(float2)(-0.6715589548470184400000000000000000f, -0.7409511253549589900000000000000000f),
(float2)(-0.9669764710448521800000000000000000f, -0.2548656596045142400000000000000000f),
(float2)(-0.9495281805930366700000000000000000f, 0.3136817403988915700000000000000000f),
(float2)(-0.6248594881423864500000000000000000f, 0.7807372285720943800000000000000000f),
(float2)(0.8314696123025452400000000000000000f, -0.5555702330196021800000000000000000f),
(float2)(0.3826834323650898400000000000000000f, -0.9238795325112867400000000000000000f),
(float2)(-0.1950903220161281900000000000000000f, -0.9807852804032304300000000000000000f),
(float2)(-0.7071067811865474600000000000000000f, -0.7071067811865475700000000000000000f),
(float2)(-0.9807852804032304300000000000000000f, -0.1950903220161286100000000000000000f),
(float2)(-0.9238795325112868500000000000000000f, 0.3826834323650896200000000000000000f),
(float2)(-0.5555702330196021800000000000000000f, 0.8314696123025452400000000000000000f),
(float2)(0.8245893027850252900000000000000000f, -0.5657318107836131200000000000000000f),
(float2)(0.3598950365349882800000000000000000f, -0.9329927988347388500000000000000000f),
(float2)(-0.2310581082806709200000000000000000f, -0.9729399522055601800000000000000000f),
(float2)(-0.7409511253549588800000000000000000f, -0.6715589548470185500000000000000000f),
(float2)(-0.9909026354277800100000000000000000f, -0.1345807085071262800000000000000000f),
(float2)(-0.8932243011955155500000000000000000f, 0.4496113296546062600000000000000000f),
(float2)(-0.4821837720791233300000000000000000f, 0.8760700941954062700000000000000000f),
(float2)(0.8175848131515837100000000000000000f, -0.5758081914178453400000000000000000f),
(float2)(0.3368898533922200500000000000000000f, -0.9415440651830208100000000000000000f),
(float2)(-0.2667127574748983100000000000000000f, -0.9637760657954398400000000000000000f),
(float2)(-0.7730104533627369900000000000000000f, -0.6343932841636454900000000000000000f),
(float2)(-0.9972904566786902100000000000000000f, -0.0735645635996672880000000000000000f),
(float2)(-0.8577286100002721200000000000000000f, 0.5141027441932215500000000000000000f),
(float2)(-0.4052413140049895300000000000000000f, 0.9142097557035308000000000000000000f),
(float2)(0.8104571982525947700000000000000000f, -0.5857978574564388600000000000000000f),
(float2)(0.3136817403988915700000000000000000f, -0.9495281805930366700000000000000000f),
(float2)(-0.3020059493192278600000000000000000f, -0.9533060403541938600000000000000000f),
(float2)(-0.8032075314806448300000000000000000f, -0.5956993044924334700000000000000000f),
(float2)(-0.9999247018391445000000000000000000f, -0.0122715382857200070000000000000000f),
(float2)(-0.8175848131515839300000000000000000f, 0.5758081914178448900000000000000000f),
(float2)(-0.3253102921622633100000000000000000f, 0.9456073253805211700000000000000000f),
(float2)(0.8032075314806449400000000000000000f, -0.5956993044924333600000000000000000f),
(float2)(0.2902846772544623300000000000000000f, -0.9569403357322089400000000000000000f),
(float2)(-0.3368898533922201600000000000000000f, -0.9415440651830207000000000000000000f),
(float2)(-0.8314696123025453500000000000000000f, -0.5555702330196021800000000000000000f),
(float2)(-0.9987954562051724100000000000000000f, 0.0490676743274181680000000000000000f),
(float2)(-0.7730104533627368800000000000000000f, 0.6343932841636456000000000000000000f),
(float2)(-0.2429801799032632600000000000000000f, 0.9700312531945442000000000000000000f),
(float2)(0.7958369046088835700000000000000000f, -0.6055110414043255500000000000000000f),
(float2)(0.2667127574748984200000000000000000f, -0.9637760657954398400000000000000000f),
(float2)(-0.3713171939518374900000000000000000f, -0.9285060804732155900000000000000000f),
(float2)(-0.8577286100002720100000000000000000f, -0.5141027441932217700000000000000000f),
(float2)(-0.9939069700023560600000000000000000f, 0.1102222072938830000000000000000000f),
(float2)(-0.7242470829514670000000000000000000f, 0.6895405447370668300000000000000000f),
(float2)(-0.1588581433338615300000000000000000f, 0.9873014181578583200000000000000000f),
(float2)(0.7883464276266063400000000000000000f, -0.6152315905806268200000000000000000f),
(float2)(0.2429801799032639800000000000000000f, -0.9700312531945439700000000000000000f),
(float2)(-0.4052413140049897500000000000000000f, -0.9142097557035306900000000000000000f),
(float2)(-0.8819212643483549400000000000000000f, -0.4713967368259978100000000000000000f),
(float2)(-0.9852776423889413300000000000000000f, 0.1709618887603009700000000000000000f),
(float2)(-0.6715589548470186600000000000000000f, 0.7409511253549588800000000000000000f),
(float2)(-0.0735645635996682450000000000000000f, 0.9972904566786902100000000000000000f),
(float2)(0.7807372285720944900000000000000000f, -0.6248594881423863400000000000000000f),
(float2)(0.2191012401568697700000000000000000f, -0.9757021300385285700000000000000000f),
(float2)(-0.4386162385385277700000000000000000f, -0.8986744656939538200000000000000000f),
(float2)(-0.9039892931234433400000000000000000f, -0.4275550934302820300000000000000000f),
(float2)(-0.9729399522055601800000000000000000f, 0.2310581082806710800000000000000000f),
(float2)(-0.6152315905806266000000000000000000f, 0.7883464276266064500000000000000000f),
(float2)(0.0122715382857201440000000000000000f, 0.9999247018391445000000000000000000f),
(float2)(0.7730104533627369900000000000000000f, -0.6343932841636454900000000000000000f),
(float2)(0.1950903220161283300000000000000000f, -0.9807852804032304300000000000000000f),
(float2)(-0.4713967368259977000000000000000000f, -0.8819212643483550500000000000000000f),
(float2)(-0.9238795325112867400000000000000000f, -0.3826834323650898900000000000000000f),
(float2)(-0.9569403357322089400000000000000000f, 0.2902846772544621100000000000000000f),
(float2)(-0.5555702330196021800000000000000000f, 0.8314696123025452400000000000000000f),
(float2)(0.0980171403295600900000000000000000f, 0.9951847266721969300000000000000000f),
(float2)(0.7651672656224589600000000000000000f, -0.6438315428897913900000000000000000f),
(float2)(0.1709618887603013600000000000000000f, -0.9852776423889412200000000000000000f),
(float2)(-0.5035383837257174600000000000000000f, -0.8639728561215868100000000000000000f),
(float2)(-0.9415440651830207000000000000000000f, -0.3368898533922203300000000000000000f),
(float2)(-0.9373390119125750700000000000000000f, 0.3484186802494341200000000000000000f),
(float2)(-0.4928981922297842000000000000000000f, 0.8700869911087113500000000000000000f),
(float2)(0.1830398879551405900000000000000000f, 0.9831054874312164000000000000000000f),
(float2)(0.7572088465064845700000000000000000f, -0.6531728429537767600000000000000000f),
(float2)(0.1467304744553617500000000000000000f, -0.9891765099647810100000000000000000f),
(float2)(-0.5349976198870970400000000000000000f, -0.8448535652497072300000000000000000f),
(float2)(-0.9569403357322088200000000000000000f, -0.2902846772544623900000000000000000f),
(float2)(-0.9142097557035305800000000000000000f, 0.4052413140049900800000000000000000f),
(float2)(-0.4275550934302824700000000000000000f, 0.9039892931234431200000000000000000f),
(float2)(0.2667127574748982000000000000000000f, 0.9637760657954399500000000000000000f),
(float2)(0.7491363945234593700000000000000000f, -0.6624157775901717800000000000000000f),
(float2)(0.1224106751992162800000000000000000f, -0.9924795345987099700000000000000000f),
(float2)(-0.5657318107836132300000000000000000f, -0.8245893027850251800000000000000000f),
(float2)(-0.9700312531945439700000000000000000f, -0.2429801799032640700000000000000000f),
(float2)(-0.8876396204028541600000000000000000f, 0.4605387109582396200000000000000000f),
(float2)(-0.3598950365349879400000000000000000f, 0.9329927988347389600000000000000000f),
(float2)(0.3484186802494345100000000000000000f, 0.9373390119125749600000000000000000f),
(float2)(0.7409511253549592200000000000000000f, -0.6715589548470183300000000000000000f),
(float2)(0.0980171403295607700000000000000000f, -0.9951847266721968200000000000000000f),
(float2)(-0.5956993044924329100000000000000000f, -0.8032075314806451600000000000000000f),
(float2)(-0.9807852804032304300000000000000000f, -0.1950903220161286100000000000000000f),
(float2)(-0.8577286100002721200000000000000000f, 0.5141027441932215500000000000000000f),
(float2)(-0.2902846772544632700000000000000000f, 0.9569403357322086000000000000000000f),
(float2)(0.4275550934302813600000000000000000f, 0.9039892931234436700000000000000000f),
(float2)(0.7326542716724128200000000000000000f, -0.6806009977954530200000000000000000f),
(float2)(0.0735645635996674540000000000000000f, -0.9972904566786902100000000000000000f),
(float2)(-0.6248594881423862300000000000000000f, -0.7807372285720946000000000000000000f),
(float2)(-0.9891765099647810100000000000000000f, -0.1467304744553618000000000000000000f),
(float2)(-0.8245893027850252900000000000000000f, 0.5657318107836132300000000000000000f),
(float2)(-0.2191012401568701000000000000000000f, 0.9757021300385284600000000000000000f),
(float2)(0.5035383837257178000000000000000000f, 0.8639728561215865900000000000000000f),
(float2)(0.7242470829514670000000000000000000f, -0.6895405447370668300000000000000000f),
(float2)(0.0490676743274181260000000000000000f, -0.9987954562051724100000000000000000f),
(float2)(-0.6531728429537765300000000000000000f, -0.7572088465064846800000000000000000f),
(float2)(-0.9951847266721968200000000000000000f, -0.0980171403295608260000000000000000f),
(float2)(-0.7883464276266063400000000000000000f, 0.6152315905806267100000000000000000f),
(float2)(-0.1467304744553623000000000000000000f, 0.9891765099647809000000000000000000f),
(float2)(0.5758081914178448900000000000000000f, 0.8175848131515839300000000000000000f),
(float2)(0.7157308252838185900000000000000000f, -0.6983762494089729200000000000000000f),
(float2)(0.0245412285229122640000000000000000f, -0.9996988186962042500000000000000000f),
(float2)(-0.6806009977954530200000000000000000f, -0.7326542716724128200000000000000000f),
(float2)(-0.9987954562051724100000000000000000f, -0.0490676743274179660000000000000000f),
(float2)(-0.7491363945234592600000000000000000f, 0.6624157775901717800000000000000000f),
(float2)(-0.0735645635996673570000000000000000f, 0.9972904566786902100000000000000000f),
(float2)(0.6438315428897918300000000000000000f, 0.7651672656224586300000000000000000f),
};


#define fvect2 float2

#define C8Q  0.70710678118654752440084436210485f
#define C5QA 0.30901699437494742410229341718282f
#define C5QB 0.95105651629515357211643933337938f
#define C5QC 0.50000000000000000000000000000000f
#define C5QD 0.58778525229247312916870595463907f
#define C5QE 0.80901699437494742410229341718282f
#define C3QA 0.50000000000000000000000000000000f
#define C3QB 0.86602540378443864676372317075294f

__attribute__((always_inline)) void 
FwdRad8B1(float2 *R0, float2 *R4, float2 *R2, float2 *R6, float2 *R1, float2 *R5, float2 *R3, float2 *R7)
{

	float2 T;

	(*R1) = (*R0) - (*R1);
	(*R0) = 2.0f * (*R0) - (*R1);
	(*R3) = (*R2) - (*R3);
	(*R2) = 2.0f * (*R2) - (*R3);
	(*R5) = (*R4) - (*R5);
	(*R4) = 2.0f * (*R4) - (*R5);
	(*R7) = (*R6) - (*R7);
	(*R6) = 2.0f * (*R6) - (*R7);
	
	(*R2) = (*R0) - (*R2);
	(*R0) = 2.0f * (*R0) - (*R2);
	(*R3) = (*R1) + (fvect2)(-(*R3).y, (*R3).x);
	(*R1) = 2.0f * (*R1) - (*R3);
	(*R6) = (*R4) - (*R6);
	(*R4) = 2.0f * (*R4) - (*R6);
	(*R7) = (*R5) + (fvect2)(-(*R7).y, (*R7).x);
	(*R5) = 2.0f * (*R5) - (*R7);
	
	(*R4) = (*R0) - (*R4);
	(*R0) = 2.0f * (*R0) - (*R4);
	(*R5) = ((*R1) - 0.70710678f * (*R5)) - 0.70710678f * (fvect2)((*R5).y, -(*R5).x);
	(*R1) = 2.0f * (*R1) - (*R5);
	(*R6) = (*R2) + (fvect2)(-(*R6).y, (*R6).x);
	(*R2) = 2.0f * (*R2) - (*R6);
	(*R7) = ((*R3) + 0.70710678f * (*R7)) - 0.70710678f * (fvect2)((*R7).y, -(*R7).x);
	(*R3) = 2.0f * (*R3) - (*R7);
	
	T = (*R1); (*R1) = (*R4); (*R4) = T;
	T = (*R3); (*R3) = (*R6); (*R6) = T;
	
}

__attribute__((always_inline)) void 
InvRad8B1(float2 *R0, float2 *R4, float2 *R2, float2 *R6, float2 *R1, float2 *R5, float2 *R3, float2 *R7)
{

	float2 T;

	(*R1) = (*R0) - (*R1);
	(*R0) = 2.0f * (*R0) - (*R1);
	(*R3) = (*R2) - (*R3);
	(*R2) = 2.0f * (*R2) - (*R3);
	(*R5) = (*R4) - (*R5);
	(*R4) = 2.0f * (*R4) - (*R5);
	(*R7) = (*R6) - (*R7);
	(*R6) = 2.0f * (*R6) - (*R7);
	
	(*R2) = (*R0) - (*R2);
	(*R0) = 2.0f * (*R0) - (*R2);
	(*R3) = (*R1) + (fvect2)((*R3).y, -(*R3).x);
	(*R1) = 2.0f * (*R1) - (*R3);
	(*R6) = (*R4) - (*R6);
	(*R4) = 2.0f * (*R4) - (*R6);
	(*R7) = (*R5) + (fvect2)((*R7).y, -(*R7).x);
	(*R5) = 2.0f * (*R5) - (*R7);
	
	(*R4) = (*R0) - (*R4);
	(*R0) = 2.0f * (*R0) - (*R4);
	(*R5) = ((*R1) - 0.70710678f * (*R5)) + 0.70710678f * (fvect2)((*R5).y, -(*R5).x);
	(*R1) = 2.0f * (*R1) - (*R5);
	(*R6) = (*R2) + (fvect2)((*R6).y, -(*R6).x);
	(*R2) = 2.0f * (*R2) - (*R6);
	(*R7) = ((*R3) + 0.70710678f * (*R7)) + 0.70710678f * (fvect2)((*R7).y, -(*R7).x);
	(*R3) = 2.0f * (*R3) - (*R7);
	
	T = (*R1); (*R1) = (*R4); (*R4) = T;
	T = (*R3); (*R3) = (*R6); (*R6) = T;
	
}

__attribute__((always_inline)) void
FwdPass0(uint rw, uint b, uint me, uint inOffset, uint outOffset, __global float2 *bufIn, __local float *bufOutRe, __local float *bufOutIm, float2 *R0, float2 *R1, float2 *R2, float2 *R3, float2 *R4, float2 *R5, float2 *R6, float2 *R7)
{


	if(rw)
	{
	(*R0) = bufIn[inOffset + ( 0 + me*1 + 0 + 0 )*1];
	(*R1) = bufIn[inOffset + ( 0 + me*1 + 0 + 64 )*1];
	(*R2) = bufIn[inOffset + ( 0 + me*1 + 0 + 128 )*1];
	(*R3) = bufIn[inOffset + ( 0 + me*1 + 0 + 192 )*1];
	(*R4) = bufIn[inOffset + ( 0 + me*1 + 0 + 256 )*1];
	(*R5) = bufIn[inOffset + ( 0 + me*1 + 0 + 320 )*1];
	(*R6) = bufIn[inOffset + ( 0 + me*1 + 0 + 384 )*1];
	(*R7) = bufIn[inOffset + ( 0 + me*1 + 0 + 448 )*1];
	}


	FwdRad8B1(R0, R1, R2, R3, R4, R5, R6, R7);


	if(rw)
	{
	bufOutRe[outOffset + ( ((1*me + 0)/1)*8 + (1*me + 0)%1 + 0 )*1] = (*R0).x;
	bufOutRe[outOffset + ( ((1*me + 0)/1)*8 + (1*me + 0)%1 + 1 )*1] = (*R1).x;
	bufOutRe[outOffset + ( ((1*me + 0)/1)*8 + (1*me + 0)%1 + 2 )*1] = (*R2).x;
	bufOutRe[outOffset + ( ((1*me + 0)/1)*8 + (1*me + 0)%1 + 3 )*1] = (*R3).x;
	bufOutRe[outOffset + ( ((1*me + 0)/1)*8 + (1*me + 0)%1 + 4 )*1] = (*R4).x;
	bufOutRe[outOffset + ( ((1*me + 0)/1)*8 + (1*me + 0)%1 + 5 )*1] = (*R5).x;
	bufOutRe[outOffset + ( ((1*me + 0)/1)*8 + (1*me + 0)%1 + 6 )*1] = (*R6).x;
	bufOutRe[outOffset + ( ((1*me + 0)/1)*8 + (1*me + 0)%1 + 7 )*1] = (*R7).x;
	}


	barrier(CLK_LOCAL_MEM_FENCE);

	if(rw)
	{
	(*R0).x = bufOutRe[outOffset + ( 0 + me*1 + 0 + 0 )*1];
	(*R1).x = bufOutRe[outOffset + ( 0 + me*1 + 0 + 64 )*1];
	(*R2).x = bufOutRe[outOffset + ( 0 + me*1 + 0 + 128 )*1];
	(*R3).x = bufOutRe[outOffset + ( 0 + me*1 + 0 + 192 )*1];
	(*R4).x = bufOutRe[outOffset + ( 0 + me*1 + 0 + 256 )*1];
	(*R5).x = bufOutRe[outOffset + ( 0 + me*1 + 0 + 320 )*1];
	(*R6).x = bufOutRe[outOffset + ( 0 + me*1 + 0 + 384 )*1];
	(*R7).x = bufOutRe[outOffset + ( 0 + me*1 + 0 + 448 )*1];
	}


	barrier(CLK_LOCAL_MEM_FENCE);

	if(rw)
	{
	bufOutIm[outOffset + ( ((1*me + 0)/1)*8 + (1*me + 0)%1 + 0 )*1] = (*R0).y;
	bufOutIm[outOffset + ( ((1*me + 0)/1)*8 + (1*me + 0)%1 + 1 )*1] = (*R1).y;
	bufOutIm[outOffset + ( ((1*me + 0)/1)*8 + (1*me + 0)%1 + 2 )*1] = (*R2).y;
	bufOutIm[outOffset + ( ((1*me + 0)/1)*8 + (1*me + 0)%1 + 3 )*1] = (*R3).y;
	bufOutIm[outOffset + ( ((1*me + 0)/1)*8 + (1*me + 0)%1 + 4 )*1] = (*R4).y;
	bufOutIm[outOffset + ( ((1*me + 0)/1)*8 + (1*me + 0)%1 + 5 )*1] = (*R5).y;
	bufOutIm[outOffset + ( ((1*me + 0)/1)*8 + (1*me + 0)%1 + 6 )*1] = (*R6).y;
	bufOutIm[outOffset + ( ((1*me + 0)/1)*8 + (1*me + 0)%1 + 7 )*1] = (*R7).y;
	}


	barrier(CLK_LOCAL_MEM_FENCE);

	if(rw)
	{
	(*R0).y = bufOutIm[outOffset + ( 0 + me*1 + 0 + 0 )*1];
	(*R1).y = bufOutIm[outOffset + ( 0 + me*1 + 0 + 64 )*1];
	(*R2).y = bufOutIm[outOffset + ( 0 + me*1 + 0 + 128 )*1];
	(*R3).y = bufOutIm[outOffset + ( 0 + me*1 + 0 + 192 )*1];
	(*R4).y = bufOutIm[outOffset + ( 0 + me*1 + 0 + 256 )*1];
	(*R5).y = bufOutIm[outOffset + ( 0 + me*1 + 0 + 320 )*1];
	(*R6).y = bufOutIm[outOffset + ( 0 + me*1 + 0 + 384 )*1];
	(*R7).y = bufOutIm[outOffset + ( 0 + me*1 + 0 + 448 )*1];
	}


	barrier(CLK_LOCAL_MEM_FENCE);

}

__attribute__((always_inline)) void
FwdPass1(uint rw, uint b, uint me, uint inOffset, uint outOffset, __local float *bufInRe, __local float *bufInIm, __local float *bufOutRe, __local float *bufOutIm, float2 *R0, float2 *R1, float2 *R2, float2 *R3, float2 *R4, float2 *R5, float2 *R6, float2 *R7)
{



	{
		float2 W = twiddles[7 + 7*((1*me + 0)%8) + 0];
		float TR, TI;
		TR = (W.x * (*R1).x) - (W.y * (*R1).y);
		TI = (W.y * (*R1).x) + (W.x * (*R1).y);
		(*R1).x = TR;
		(*R1).y = TI;
	}

	{
		float2 W = twiddles[7 + 7*((1*me + 0)%8) + 1];
		float TR, TI;
		TR = (W.x * (*R2).x) - (W.y * (*R2).y);
		TI = (W.y * (*R2).x) + (W.x * (*R2).y);
		(*R2).x = TR;
		(*R2).y = TI;
	}

	{
		float2 W = twiddles[7 + 7*((1*me + 0)%8) + 2];
		float TR, TI;
		TR = (W.x * (*R3).x) - (W.y * (*R3).y);
		TI = (W.y * (*R3).x) + (W.x * (*R3).y);
		(*R3).x = TR;
		(*R3).y = TI;
	}

	{
		float2 W = twiddles[7 + 7*((1*me + 0)%8) + 3];
		float TR, TI;
		TR = (W.x * (*R4).x) - (W.y * (*R4).y);
		TI = (W.y * (*R4).x) + (W.x * (*R4).y);
		(*R4).x = TR;
		(*R4).y = TI;
	}

	{
		float2 W = twiddles[7 + 7*((1*me + 0)%8) + 4];
		float TR, TI;
		TR = (W.x * (*R5).x) - (W.y * (*R5).y);
		TI = (W.y * (*R5).x) + (W.x * (*R5).y);
		(*R5).x = TR;
		(*R5).y = TI;
	}

	{
		float2 W = twiddles[7 + 7*((1*me + 0)%8) + 5];
		float TR, TI;
		TR = (W.x * (*R6).x) - (W.y * (*R6).y);
		TI = (W.y * (*R6).x) + (W.x * (*R6).y);
		(*R6).x = TR;
		(*R6).y = TI;
	}

	{
		float2 W = twiddles[7 + 7*((1*me + 0)%8) + 6];
		float TR, TI;
		TR = (W.x * (*R7).x) - (W.y * (*R7).y);
		TI = (W.y * (*R7).x) + (W.x * (*R7).y);
		(*R7).x = TR;
		(*R7).y = TI;
	}

	FwdRad8B1(R0, R1, R2, R3, R4, R5, R6, R7);


	if(rw)
	{
	bufOutRe[outOffset + ( ((1*me + 0)/8)*64 + (1*me + 0)%8 + 0 )*1] = (*R0).x;
	bufOutRe[outOffset + ( ((1*me + 0)/8)*64 + (1*me + 0)%8 + 8 )*1] = (*R1).x;
	bufOutRe[outOffset + ( ((1*me + 0)/8)*64 + (1*me + 0)%8 + 16 )*1] = (*R2).x;
	bufOutRe[outOffset + ( ((1*me + 0)/8)*64 + (1*me + 0)%8 + 24 )*1] = (*R3).x;
	bufOutRe[outOffset + ( ((1*me + 0)/8)*64 + (1*me + 0)%8 + 32 )*1] = (*R4).x;
	bufOutRe[outOffset + ( ((1*me + 0)/8)*64 + (1*me + 0)%8 + 40 )*1] = (*R5).x;
	bufOutRe[outOffset + ( ((1*me + 0)/8)*64 + (1*me + 0)%8 + 48 )*1] = (*R6).x;
	bufOutRe[outOffset + ( ((1*me + 0)/8)*64 + (1*me + 0)%8 + 56 )*1] = (*R7).x;
	}


	barrier(CLK_LOCAL_MEM_FENCE);

	if(rw)
	{
	(*R0).x = bufOutRe[outOffset + ( 0 + me*1 + 0 + 0 )*1];
	(*R1).x = bufOutRe[outOffset + ( 0 + me*1 + 0 + 64 )*1];
	(*R2).x = bufOutRe[outOffset + ( 0 + me*1 + 0 + 128 )*1];
	(*R3).x = bufOutRe[outOffset + ( 0 + me*1 + 0 + 192 )*1];
	(*R4).x = bufOutRe[outOffset + ( 0 + me*1 + 0 + 256 )*1];
	(*R5).x = bufOutRe[outOffset + ( 0 + me*1 + 0 + 320 )*1];
	(*R6).x = bufOutRe[outOffset + ( 0 + me*1 + 0 + 384 )*1];
	(*R7).x = bufOutRe[outOffset + ( 0 + me*1 + 0 + 448 )*1];
	}


	barrier(CLK_LOCAL_MEM_FENCE);

	if(rw)
	{
	bufOutIm[outOffset + ( ((1*me + 0)/8)*64 + (1*me + 0)%8 + 0 )*1] = (*R0).y;
	bufOutIm[outOffset + ( ((1*me + 0)/8)*64 + (1*me + 0)%8 + 8 )*1] = (*R1).y;
	bufOutIm[outOffset + ( ((1*me + 0)/8)*64 + (1*me + 0)%8 + 16 )*1] = (*R2).y;
	bufOutIm[outOffset + ( ((1*me + 0)/8)*64 + (1*me + 0)%8 + 24 )*1] = (*R3).y;
	bufOutIm[outOffset + ( ((1*me + 0)/8)*64 + (1*me + 0)%8 + 32 )*1] = (*R4).y;
	bufOutIm[outOffset + ( ((1*me + 0)/8)*64 + (1*me + 0)%8 + 40 )*1] = (*R5).y;
	bufOutIm[outOffset + ( ((1*me + 0)/8)*64 + (1*me + 0)%8 + 48 )*1] = (*R6).y;
	bufOutIm[outOffset + ( ((1*me + 0)/8)*64 + (1*me + 0)%8 + 56 )*1] = (*R7).y;
	}


	barrier(CLK_LOCAL_MEM_FENCE);

	if(rw)
	{
	(*R0).y = bufOutIm[outOffset + ( 0 + me*1 + 0 + 0 )*1];
	(*R1).y = bufOutIm[outOffset + ( 0 + me*1 + 0 + 64 )*1];
	(*R2).y = bufOutIm[outOffset + ( 0 + me*1 + 0 + 128 )*1];
	(*R3).y = bufOutIm[outOffset + ( 0 + me*1 + 0 + 192 )*1];
	(*R4).y = bufOutIm[outOffset + ( 0 + me*1 + 0 + 256 )*1];
	(*R5).y = bufOutIm[outOffset + ( 0 + me*1 + 0 + 320 )*1];
	(*R6).y = bufOutIm[outOffset + ( 0 + me*1 + 0 + 384 )*1];
	(*R7).y = bufOutIm[outOffset + ( 0 + me*1 + 0 + 448 )*1];
	}


	barrier(CLK_LOCAL_MEM_FENCE);

}

__attribute__((always_inline)) void
FwdPass2(uint rw, uint b, uint me, uint inOffset, uint outOffset, __local float *bufInRe, __local float *bufInIm, __global float2 *bufOut, float2 *R0, float2 *R1, float2 *R2, float2 *R3, float2 *R4, float2 *R5, float2 *R6, float2 *R7)
{



	{
		float2 W = twiddles[63 + 7*((1*me + 0)%64) + 0];
		float TR, TI;
		TR = (W.x * (*R1).x) - (W.y * (*R1).y);
		TI = (W.y * (*R1).x) + (W.x * (*R1).y);
		(*R1).x = TR;
		(*R1).y = TI;
	}

	{
		float2 W = twiddles[63 + 7*((1*me + 0)%64) + 1];
		float TR, TI;
		TR = (W.x * (*R2).x) - (W.y * (*R2).y);
		TI = (W.y * (*R2).x) + (W.x * (*R2).y);
		(*R2).x = TR;
		(*R2).y = TI;
	}

	{
		float2 W = twiddles[63 + 7*((1*me + 0)%64) + 2];
		float TR, TI;
		TR = (W.x * (*R3).x) - (W.y * (*R3).y);
		TI = (W.y * (*R3).x) + (W.x * (*R3).y);
		(*R3).x = TR;
		(*R3).y = TI;
	}

	{
		float2 W = twiddles[63 + 7*((1*me + 0)%64) + 3];
		float TR, TI;
		TR = (W.x * (*R4).x) - (W.y * (*R4).y);
		TI = (W.y * (*R4).x) + (W.x * (*R4).y);
		(*R4).x = TR;
		(*R4).y = TI;
	}

	{
		float2 W = twiddles[63 + 7*((1*me + 0)%64) + 4];
		float TR, TI;
		TR = (W.x * (*R5).x) - (W.y * (*R5).y);
		TI = (W.y * (*R5).x) + (W.x * (*R5).y);
		(*R5).x = TR;
		(*R5).y = TI;
	}

	{
		float2 W = twiddles[63 + 7*((1*me + 0)%64) + 5];
		float TR, TI;
		TR = (W.x * (*R6).x) - (W.y * (*R6).y);
		TI = (W.y * (*R6).x) + (W.x * (*R6).y);
		(*R6).x = TR;
		(*R6).y = TI;
	}

	{
		float2 W = twiddles[63 + 7*((1*me + 0)%64) + 6];
		float TR, TI;
		TR = (W.x * (*R7).x) - (W.y * (*R7).y);
		TI = (W.y * (*R7).x) + (W.x * (*R7).y);
		(*R7).x = TR;
		(*R7).y = TI;
	}

	FwdRad8B1(R0, R1, R2, R3, R4, R5, R6, R7);


	if(rw)
	{
	bufOut[outOffset + ( 1*me + 0 + 0 )*1] = (*R0);
	bufOut[outOffset + ( 1*me + 0 + 64 )*1] = (*R1);
	bufOut[outOffset + ( 1*me + 0 + 128 )*1] = (*R2);
	bufOut[outOffset + ( 1*me + 0 + 192 )*1] = (*R3);
	bufOut[outOffset + ( 1*me + 0 + 256 )*1] = (*R4);
	bufOut[outOffset + ( 1*me + 0 + 320 )*1] = (*R5);
	bufOut[outOffset + ( 1*me + 0 + 384 )*1] = (*R6);
	bufOut[outOffset + ( 1*me + 0 + 448 )*1] = (*R7);
	}

}

__attribute__((always_inline)) void
InvPass0(uint rw, uint b, uint me, uint inOffset, uint outOffset, __global float2 *bufIn, __local float *bufOutRe, __local float *bufOutIm, float2 *R0, float2 *R1, float2 *R2, float2 *R3, float2 *R4, float2 *R5, float2 *R6, float2 *R7)
{


	if(rw)
	{
	(*R0) = bufIn[inOffset + ( 0 + me*1 + 0 + 0 )*1];
	(*R1) = bufIn[inOffset + ( 0 + me*1 + 0 + 64 )*1];
	(*R2) = bufIn[inOffset + ( 0 + me*1 + 0 + 128 )*1];
	(*R3) = bufIn[inOffset + ( 0 + me*1 + 0 + 192 )*1];
	(*R4) = bufIn[inOffset + ( 0 + me*1 + 0 + 256 )*1];
	(*R5) = bufIn[inOffset + ( 0 + me*1 + 0 + 320 )*1];
	(*R6) = bufIn[inOffset + ( 0 + me*1 + 0 + 384 )*1];
	(*R7) = bufIn[inOffset + ( 0 + me*1 + 0 + 448 )*1];
	}


	InvRad8B1(R0, R1, R2, R3, R4, R5, R6, R7);


	if(rw)
	{
	bufOutRe[outOffset + ( ((1*me + 0)/1)*8 + (1*me + 0)%1 + 0 )*1] = (*R0).x;
	bufOutRe[outOffset + ( ((1*me + 0)/1)*8 + (1*me + 0)%1 + 1 )*1] = (*R1).x;
	bufOutRe[outOffset + ( ((1*me + 0)/1)*8 + (1*me + 0)%1 + 2 )*1] = (*R2).x;
	bufOutRe[outOffset + ( ((1*me + 0)/1)*8 + (1*me + 0)%1 + 3 )*1] = (*R3).x;
	bufOutRe[outOffset + ( ((1*me + 0)/1)*8 + (1*me + 0)%1 + 4 )*1] = (*R4).x;
	bufOutRe[outOffset + ( ((1*me + 0)/1)*8 + (1*me + 0)%1 + 5 )*1] = (*R5).x;
	bufOutRe[outOffset + ( ((1*me + 0)/1)*8 + (1*me + 0)%1 + 6 )*1] = (*R6).x;
	bufOutRe[outOffset + ( ((1*me + 0)/1)*8 + (1*me + 0)%1 + 7 )*1] = (*R7).x;
	}


	barrier(CLK_LOCAL_MEM_FENCE);

	if(rw)
	{
	(*R0).x = bufOutRe[outOffset + ( 0 + me*1 + 0 + 0 )*1];
	(*R1).x = bufOutRe[outOffset + ( 0 + me*1 + 0 + 64 )*1];
	(*R2).x = bufOutRe[outOffset + ( 0 + me*1 + 0 + 128 )*1];
	(*R3).x = bufOutRe[outOffset + ( 0 + me*1 + 0 + 192 )*1];
	(*R4).x = bufOutRe[outOffset + ( 0 + me*1 + 0 + 256 )*1];
	(*R5).x = bufOutRe[outOffset + ( 0 + me*1 + 0 + 320 )*1];
	(*R6).x = bufOutRe[outOffset + ( 0 + me*1 + 0 + 384 )*1];
	(*R7).x = bufOutRe[outOffset + ( 0 + me*1 + 0 + 448 )*1];
	}


	barrier(CLK_LOCAL_MEM_FENCE);

	if(rw)
	{
	bufOutIm[outOffset + ( ((1*me + 0)/1)*8 + (1*me + 0)%1 + 0 )*1] = (*R0).y;
	bufOutIm[outOffset + ( ((1*me + 0)/1)*8 + (1*me + 0)%1 + 1 )*1] = (*R1).y;
	bufOutIm[outOffset + ( ((1*me + 0)/1)*8 + (1*me + 0)%1 + 2 )*1] = (*R2).y;
	bufOutIm[outOffset + ( ((1*me + 0)/1)*8 + (1*me + 0)%1 + 3 )*1] = (*R3).y;
	bufOutIm[outOffset + ( ((1*me + 0)/1)*8 + (1*me + 0)%1 + 4 )*1] = (*R4).y;
	bufOutIm[outOffset + ( ((1*me + 0)/1)*8 + (1*me + 0)%1 + 5 )*1] = (*R5).y;
	bufOutIm[outOffset + ( ((1*me + 0)/1)*8 + (1*me + 0)%1 + 6 )*1] = (*R6).y;
	bufOutIm[outOffset + ( ((1*me + 0)/1)*8 + (1*me + 0)%1 + 7 )*1] = (*R7).y;
	}


	barrier(CLK_LOCAL_MEM_FENCE);

	if(rw)
	{
	(*R0).y = bufOutIm[outOffset + ( 0 + me*1 + 0 + 0 )*1];
	(*R1).y = bufOutIm[outOffset + ( 0 + me*1 + 0 + 64 )*1];
	(*R2).y = bufOutIm[outOffset + ( 0 + me*1 + 0 + 128 )*1];
	(*R3).y = bufOutIm[outOffset + ( 0 + me*1 + 0 + 192 )*1];
	(*R4).y = bufOutIm[outOffset + ( 0 + me*1 + 0 + 256 )*1];
	(*R5).y = bufOutIm[outOffset + ( 0 + me*1 + 0 + 320 )*1];
	(*R6).y = bufOutIm[outOffset + ( 0 + me*1 + 0 + 384 )*1];
	(*R7).y = bufOutIm[outOffset + ( 0 + me*1 + 0 + 448 )*1];
	}


	barrier(CLK_LOCAL_MEM_FENCE);

}

__attribute__((always_inline)) void
InvPass1(uint rw, uint b, uint me, uint inOffset, uint outOffset, __local float *bufInRe, __local float *bufInIm, __local float *bufOutRe, __local float *bufOutIm, float2 *R0, float2 *R1, float2 *R2, float2 *R3, float2 *R4, float2 *R5, float2 *R6, float2 *R7)
{



	{
		float2 W = twiddles[7 + 7*((1*me + 0)%8) + 0];
		float TR, TI;
		TR =  (W.x * (*R1).x) + (W.y * (*R1).y);
		TI = -(W.y * (*R1).x) + (W.x * (*R1).y);
		(*R1).x = TR;
		(*R1).y = TI;
	}

	{
		float2 W = twiddles[7 + 7*((1*me + 0)%8) + 1];
		float TR, TI;
		TR =  (W.x * (*R2).x) + (W.y * (*R2).y);
		TI = -(W.y * (*R2).x) + (W.x * (*R2).y);
		(*R2).x = TR;
		(*R2).y = TI;
	}

	{
		float2 W = twiddles[7 + 7*((1*me + 0)%8) + 2];
		float TR, TI;
		TR =  (W.x * (*R3).x) + (W.y * (*R3).y);
		TI = -(W.y * (*R3).x) + (W.x * (*R3).y);
		(*R3).x = TR;
		(*R3).y = TI;
	}

	{
		float2 W = twiddles[7 + 7*((1*me + 0)%8) + 3];
		float TR, TI;
		TR =  (W.x * (*R4).x) + (W.y * (*R4).y);
		TI = -(W.y * (*R4).x) + (W.x * (*R4).y);
		(*R4).x = TR;
		(*R4).y = TI;
	}

	{
		float2 W = twiddles[7 + 7*((1*me + 0)%8) + 4];
		float TR, TI;
		TR =  (W.x * (*R5).x) + (W.y * (*R5).y);
		TI = -(W.y * (*R5).x) + (W.x * (*R5).y);
		(*R5).x = TR;
		(*R5).y = TI;
	}

	{
		float2 W = twiddles[7 + 7*((1*me + 0)%8) + 5];
		float TR, TI;
		TR =  (W.x * (*R6).x) + (W.y * (*R6).y);
		TI = -(W.y * (*R6).x) + (W.x * (*R6).y);
		(*R6).x = TR;
		(*R6).y = TI;
	}

	{
		float2 W = twiddles[7 + 7*((1*me + 0)%8) + 6];
		float TR, TI;
		TR =  (W.x * (*R7).x) + (W.y * (*R7).y);
		TI = -(W.y * (*R7).x) + (W.x * (*R7).y);
		(*R7).x = TR;
		(*R7).y = TI;
	}

	InvRad8B1(R0, R1, R2, R3, R4, R5, R6, R7);


	if(rw)
	{
	bufOutRe[outOffset + ( ((1*me + 0)/8)*64 + (1*me + 0)%8 + 0 )*1] = (*R0).x;
	bufOutRe[outOffset + ( ((1*me + 0)/8)*64 + (1*me + 0)%8 + 8 )*1] = (*R1).x;
	bufOutRe[outOffset + ( ((1*me + 0)/8)*64 + (1*me + 0)%8 + 16 )*1] = (*R2).x;
	bufOutRe[outOffset + ( ((1*me + 0)/8)*64 + (1*me + 0)%8 + 24 )*1] = (*R3).x;
	bufOutRe[outOffset + ( ((1*me + 0)/8)*64 + (1*me + 0)%8 + 32 )*1] = (*R4).x;
	bufOutRe[outOffset + ( ((1*me + 0)/8)*64 + (1*me + 0)%8 + 40 )*1] = (*R5).x;
	bufOutRe[outOffset + ( ((1*me + 0)/8)*64 + (1*me + 0)%8 + 48 )*1] = (*R6).x;
	bufOutRe[outOffset + ( ((1*me + 0)/8)*64 + (1*me + 0)%8 + 56 )*1] = (*R7).x;
	}


	barrier(CLK_LOCAL_MEM_FENCE);

	if(rw)
	{
	(*R0).x = bufOutRe[outOffset + ( 0 + me*1 + 0 + 0 )*1];
	(*R1).x = bufOutRe[outOffset + ( 0 + me*1 + 0 + 64 )*1];
	(*R2).x = bufOutRe[outOffset + ( 0 + me*1 + 0 + 128 )*1];
	(*R3).x = bufOutRe[outOffset + ( 0 + me*1 + 0 + 192 )*1];
	(*R4).x = bufOutRe[outOffset + ( 0 + me*1 + 0 + 256 )*1];
	(*R5).x = bufOutRe[outOffset + ( 0 + me*1 + 0 + 320 )*1];
	(*R6).x = bufOutRe[outOffset + ( 0 + me*1 + 0 + 384 )*1];
	(*R7).x = bufOutRe[outOffset + ( 0 + me*1 + 0 + 448 )*1];
	}


	barrier(CLK_LOCAL_MEM_FENCE);

	if(rw)
	{
	bufOutIm[outOffset + ( ((1*me + 0)/8)*64 + (1*me + 0)%8 + 0 )*1] = (*R0).y;
	bufOutIm[outOffset + ( ((1*me + 0)/8)*64 + (1*me + 0)%8 + 8 )*1] = (*R1).y;
	bufOutIm[outOffset + ( ((1*me + 0)/8)*64 + (1*me + 0)%8 + 16 )*1] = (*R2).y;
	bufOutIm[outOffset + ( ((1*me + 0)/8)*64 + (1*me + 0)%8 + 24 )*1] = (*R3).y;
	bufOutIm[outOffset + ( ((1*me + 0)/8)*64 + (1*me + 0)%8 + 32 )*1] = (*R4).y;
	bufOutIm[outOffset + ( ((1*me + 0)/8)*64 + (1*me + 0)%8 + 40 )*1] = (*R5).y;
	bufOutIm[outOffset + ( ((1*me + 0)/8)*64 + (1*me + 0)%8 + 48 )*1] = (*R6).y;
	bufOutIm[outOffset + ( ((1*me + 0)/8)*64 + (1*me + 0)%8 + 56 )*1] = (*R7).y;
	}


	barrier(CLK_LOCAL_MEM_FENCE);

	if(rw)
	{
	(*R0).y = bufOutIm[outOffset + ( 0 + me*1 + 0 + 0 )*1];
	(*R1).y = bufOutIm[outOffset + ( 0 + me*1 + 0 + 64 )*1];
	(*R2).y = bufOutIm[outOffset + ( 0 + me*1 + 0 + 128 )*1];
	(*R3).y = bufOutIm[outOffset + ( 0 + me*1 + 0 + 192 )*1];
	(*R4).y = bufOutIm[outOffset + ( 0 + me*1 + 0 + 256 )*1];
	(*R5).y = bufOutIm[outOffset + ( 0 + me*1 + 0 + 320 )*1];
	(*R6).y = bufOutIm[outOffset + ( 0 + me*1 + 0 + 384 )*1];
	(*R7).y = bufOutIm[outOffset + ( 0 + me*1 + 0 + 448 )*1];
	}


	barrier(CLK_LOCAL_MEM_FENCE);

}

__attribute__((always_inline)) void
InvPass2(uint rw, uint b, uint me, uint inOffset, uint outOffset, __local float *bufInRe, __local float *bufInIm, __global float2 *bufOut, float2 *R0, float2 *R1, float2 *R2, float2 *R3, float2 *R4, float2 *R5, float2 *R6, float2 *R7)
{



	{
		float2 W = twiddles[63 + 7*((1*me + 0)%64) + 0];
		float TR, TI;
		TR =  (W.x * (*R1).x) + (W.y * (*R1).y);
		TI = -(W.y * (*R1).x) + (W.x * (*R1).y);
		(*R1).x = TR;
		(*R1).y = TI;
	}

	{
		float2 W = twiddles[63 + 7*((1*me + 0)%64) + 1];
		float TR, TI;
		TR =  (W.x * (*R2).x) + (W.y * (*R2).y);
		TI = -(W.y * (*R2).x) + (W.x * (*R2).y);
		(*R2).x = TR;
		(*R2).y = TI;
	}

	{
		float2 W = twiddles[63 + 7*((1*me + 0)%64) + 2];
		float TR, TI;
		TR =  (W.x * (*R3).x) + (W.y * (*R3).y);
		TI = -(W.y * (*R3).x) + (W.x * (*R3).y);
		(*R3).x = TR;
		(*R3).y = TI;
	}

	{
		float2 W = twiddles[63 + 7*((1*me + 0)%64) + 3];
		float TR, TI;
		TR =  (W.x * (*R4).x) + (W.y * (*R4).y);
		TI = -(W.y * (*R4).x) + (W.x * (*R4).y);
		(*R4).x = TR;
		(*R4).y = TI;
	}

	{
		float2 W = twiddles[63 + 7*((1*me + 0)%64) + 4];
		float TR, TI;
		TR =  (W.x * (*R5).x) + (W.y * (*R5).y);
		TI = -(W.y * (*R5).x) + (W.x * (*R5).y);
		(*R5).x = TR;
		(*R5).y = TI;
	}

	{
		float2 W = twiddles[63 + 7*((1*me + 0)%64) + 5];
		float TR, TI;
		TR =  (W.x * (*R6).x) + (W.y * (*R6).y);
		TI = -(W.y * (*R6).x) + (W.x * (*R6).y);
		(*R6).x = TR;
		(*R6).y = TI;
	}

	{
		float2 W = twiddles[63 + 7*((1*me + 0)%64) + 6];
		float TR, TI;
		TR =  (W.x * (*R7).x) + (W.y * (*R7).y);
		TI = -(W.y * (*R7).x) + (W.x * (*R7).y);
		(*R7).x = TR;
		(*R7).y = TI;
	}

	InvRad8B1(R0, R1, R2, R3, R4, R5, R6, R7);


	if(rw)
	{
	bufOut[outOffset + ( 1*me + 0 + 0 )*1] = (*R0) * 3.8146972656250000e-006f;
	bufOut[outOffset + ( 1*me + 0 + 64 )*1] = (*R1) * 3.8146972656250000e-006f;
	bufOut[outOffset + ( 1*me + 0 + 128 )*1] = (*R2) * 3.8146972656250000e-006f;
	bufOut[outOffset + ( 1*me + 0 + 192 )*1] = (*R3) * 3.8146972656250000e-006f;
	bufOut[outOffset + ( 1*me + 0 + 256 )*1] = (*R4) * 3.8146972656250000e-006f;
	bufOut[outOffset + ( 1*me + 0 + 320 )*1] = (*R5) * 3.8146972656250000e-006f;
	bufOut[outOffset + ( 1*me + 0 + 384 )*1] = (*R6) * 3.8146972656250000e-006f;
	bufOut[outOffset + ( 1*me + 0 + 448 )*1] = (*R7) * 3.8146972656250000e-006f;
	}

}

__kernel __attribute__((reqd_work_group_size (64,1,1)))
void fft_fwd(__global float2 * restrict gb)
{
	uint me = get_local_id(0);
	uint batch = get_group_id(0);

	__local float lds[512];

	uint ioOffset;
	__global float2 *lwb;

	float2 R0, R1, R2, R3, R4, R5, R6, R7;

	uint b = 0;

	ioOffset = (batch/512)*262144 + (batch%512)*512;
	lwb = gb + ioOffset;

	FwdPass0(1, b, me, 0, 0, lwb, lds, lds, &R0, &R1, &R2, &R3, &R4, &R5, &R6, &R7);
	FwdPass1(1, b, me, 0, 0, lds, lds, lds, lds, &R0, &R1, &R2, &R3, &R4, &R5, &R6, &R7);
	FwdPass2(1, b, me, 0, 0, lds, lds, lwb, &R0, &R1, &R2, &R3, &R4, &R5, &R6, &R7);
}

__kernel __attribute__((reqd_work_group_size (64,1,1)))
void fft_back(__global float2 * restrict gb)
{
	uint me = get_local_id(0);
	uint batch = get_group_id(0);

	__local float lds[512];

	uint ioOffset;
	__global float2 *lwb;

	float2 R0, R1, R2, R3, R4, R5, R6, R7;

	uint b = 0;

	ioOffset = (batch/512)*262144 + (batch%512)*512;
	lwb = gb + ioOffset;

	InvPass0(1, b, me, 0, 0, lwb, lds, lds, &R0, &R1, &R2, &R3, &R4, &R5, &R6, &R7);
	InvPass1(1, b, me, 0, 0, lds, lds, lds, lds, &R0, &R1, &R2, &R3, &R4, &R5, &R6, &R7);
	InvPass2(1, b, me, 0, 0, lds, lds, lwb, &R0, &R1, &R2, &R3, &R4, &R5, &R6, &R7);
}


