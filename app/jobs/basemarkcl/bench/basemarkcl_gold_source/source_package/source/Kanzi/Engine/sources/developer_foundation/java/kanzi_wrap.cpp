/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13




SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <stdexcept>


#define true KZ_TRUE
#define false KZ_FALSE


#include "../cpp/src/smartptr.h"
#include "../cpp/src/application/application.h"
#include "../cpp/src/user/engine/engine.h"
#include "../cpp/src/user/project/project.h"
#include "../cpp/src/user/scene_graph/scene.h"
#include "../cpp/src/system/display/window.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jint JNICALL Java_com_rightware_kanzi_developer_1foundationJNI_KZ_1NULL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_rightware_kanzi_developer_1foundationJNI_kzMultiLineMacroTest_1private(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  kzBool result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (kzBool)kzMultiLineMacroTest_private();
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_rightware_kanzi_developer_1foundationJNI_new_1Scene_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Kanzi::User::Scene *arg1 = 0 ;
  Kanzi::User::Scene *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Kanzi::User::Scene **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Kanzi::User::Scene const & reference is null");
    return 0;
  } 
  {
    try {
      result = (Kanzi::User::Scene *)new Kanzi::User::Scene((Kanzi::User::Scene const &)*arg1);
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(Kanzi::User::Scene **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_rightware_kanzi_developer_1foundationJNI_new_1Scene_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  KzuScene *arg1 = (KzuScene *) 0 ;
  Kanzi::User::Scene *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(KzuScene **)&jarg1; 
  {
    try {
      result = (Kanzi::User::Scene *)new Kanzi::User::Scene(arg1);
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(Kanzi::User::Scene **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_rightware_kanzi_developer_1foundationJNI_delete_1Scene(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Kanzi::User::Scene *arg1 = (Kanzi::User::Scene *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Kanzi::User::Scene **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_rightware_kanzi_developer_1foundationJNI_Scene_1handle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Kanzi::User::Scene *arg1 = (Kanzi::User::Scene *) 0 ;
  KzuScene *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Kanzi::User::Scene **)&jarg1; 
  {
    try {
      result = (KzuScene *)((Kanzi::User::Scene const *)arg1)->handle();
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(KzuScene **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_rightware_kanzi_developer_1foundationJNI_new_1Application(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Kanzi::Application::Application *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Kanzi::Application::Application *)new Kanzi::Application::Application();
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(Kanzi::Application::Application **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_rightware_kanzi_developer_1foundationJNI_delete_1Application(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Kanzi::Application::Application *arg1 = (Kanzi::Application::Application *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Kanzi::Application::Application **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_rightware_kanzi_developer_1foundationJNI_Application_1project(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Kanzi::Application::Application *arg1 = (Kanzi::Application::Application *) 0 ;
  Kanzi::User::Project *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Kanzi::Application::Application **)&jarg1; 
  {
    try {
      result = (Kanzi::User::Project *)((Kanzi::Application::Application const *)arg1)->project();
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(Kanzi::User::Project **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_rightware_kanzi_developer_1foundationJNI_Application_1window(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Kanzi::Application::Application *arg1 = (Kanzi::Application::Application *) 0 ;
  Kanzi::System::Window *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Kanzi::Application::Application **)&jarg1; 
  {
    try {
      result = (Kanzi::System::Window *)((Kanzi::Application::Application const *)arg1)->window();
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(Kanzi::System::Window **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_rightware_kanzi_developer_1foundationJNI_Application_1update(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Kanzi::Application::Application *arg1 = (Kanzi::Application::Application *) 0 ;
  kzUint arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Kanzi::Application::Application **)&jarg1; 
  arg2 = (kzUint)jarg2; 
  {
    try {
      (arg1)->update(arg2);
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_rightware_kanzi_developer_1foundationJNI_Application_1run(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Kanzi::Application::Application *arg1 = (Kanzi::Application::Application *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Kanzi::Application::Application **)&jarg1; 
  {
    try {
      (arg1)->run();
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_rightware_kanzi_developer_1foundationJNI_Application_1pause(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Kanzi::Application::Application *arg1 = (Kanzi::Application::Application *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Kanzi::Application::Application **)&jarg1; 
  {
    try {
      (arg1)->pause();
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_rightware_kanzi_developer_1foundationJNI_Application_1resume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Kanzi::Application::Application *arg1 = (Kanzi::Application::Application *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Kanzi::Application::Application **)&jarg1; 
  {
    try {
      (arg1)->resume();
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_rightware_kanzi_developer_1foundationJNI_Application_1quit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Kanzi::Application::Application *arg1 = (Kanzi::Application::Application *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Kanzi::Application::Application **)&jarg1; 
  {
    try {
      (arg1)->quit();
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_rightware_kanzi_developer_1foundationJNI_Application_1setScene(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Kanzi::Application::Application *arg1 = (Kanzi::Application::Application *) 0 ;
  ScenePtr *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Kanzi::Application::Application **)&jarg1; 
  arg2 = *(ScenePtr **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ScenePtr & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setScene(*arg2);
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_rightware_kanzi_developer_1foundationJNI_Application_1scene(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Kanzi::Application::Application *arg1 = (Kanzi::Application::Application *) 0 ;
  ScenePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Kanzi::Application::Application **)&jarg1; 
  {
    try {
      result = ((Kanzi::Application::Application const *)arg1)->scene();
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(ScenePtr **)&jresult = new ScenePtr((const ScenePtr &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_rightware_kanzi_developer_1foundationJNI_Application_1setDebugObjectsEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Kanzi::Application::Application *arg1 = (Kanzi::Application::Application *) 0 ;
  kzBool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Kanzi::Application::Application **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setDebugObjectsEnabled(arg2);
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_rightware_kanzi_developer_1foundationJNI_Application_1debugObjectsEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Kanzi::Application::Application *arg1 = (Kanzi::Application::Application *) 0 ;
  kzBool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Kanzi::Application::Application **)&jarg1; 
  {
    try {
      result = (kzBool)((Kanzi::Application::Application const *)arg1)->debugObjectsEnabled();
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_rightware_kanzi_developer_1foundationJNI_Application_1setGridEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Kanzi::Application::Application *arg1 = (Kanzi::Application::Application *) 0 ;
  kzBool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Kanzi::Application::Application **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setGridEnabled(arg2);
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_rightware_kanzi_developer_1foundationJNI_Application_1gridEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Kanzi::Application::Application *arg1 = (Kanzi::Application::Application *) 0 ;
  kzBool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Kanzi::Application::Application **)&jarg1; 
  {
    try {
      result = (kzBool)((Kanzi::Application::Application const *)arg1)->gridEnabled();
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_rightware_kanzi_developer_1foundationJNI_Application_1setFpsInfoEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Kanzi::Application::Application *arg1 = (Kanzi::Application::Application *) 0 ;
  kzBool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Kanzi::Application::Application **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setFpsInfoEnabled(arg2);
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_rightware_kanzi_developer_1foundationJNI_Application_1fpsInfoEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Kanzi::Application::Application *arg1 = (Kanzi::Application::Application *) 0 ;
  kzBool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Kanzi::Application::Application **)&jarg1; 
  {
    try {
      result = (kzBool)((Kanzi::Application::Application const *)arg1)->fpsInfoEnabled();
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_rightware_kanzi_developer_1foundationJNI_Application_1setBoundingBoxVisualizationEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Kanzi::Application::Application *arg1 = (Kanzi::Application::Application *) 0 ;
  kzBool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Kanzi::Application::Application **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setBoundingBoxVisualizationEnabled(arg2);
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_rightware_kanzi_developer_1foundationJNI_Application_1boundingBoxVisualizationEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Kanzi::Application::Application *arg1 = (Kanzi::Application::Application *) 0 ;
  kzBool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Kanzi::Application::Application **)&jarg1; 
  {
    try {
      result = (kzBool)((Kanzi::Application::Application const *)arg1)->boundingBoxVisualizationEnabled();
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_rightware_kanzi_developer_1foundationJNI_Application_1setFreeCameraEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Kanzi::Application::Application *arg1 = (Kanzi::Application::Application *) 0 ;
  kzBool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Kanzi::Application::Application **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setFreeCameraEnabled(arg2);
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_rightware_kanzi_developer_1foundationJNI_Application_1freeCameraEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Kanzi::Application::Application *arg1 = (Kanzi::Application::Application *) 0 ;
  kzBool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Kanzi::Application::Application **)&jarg1; 
  {
    try {
      result = (kzBool)((Kanzi::Application::Application const *)arg1)->freeCameraEnabled();
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_rightware_kanzi_developer_1foundationJNI_new_1Engine(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  KzuEngine *arg1 = (KzuEngine *) 0 ;
  Kanzi::User::Engine *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(KzuEngine **)&jarg1; 
  {
    try {
      result = (Kanzi::User::Engine *)new Kanzi::User::Engine(arg1);
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(Kanzi::User::Engine **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_rightware_kanzi_developer_1foundationJNI_delete_1Engine(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Kanzi::User::Engine *arg1 = (Kanzi::User::Engine *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Kanzi::User::Engine **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_rightware_kanzi_developer_1foundationJNI_Engine_1setActiveWindow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Kanzi::User::Engine *arg1 = (Kanzi::User::Engine *) 0 ;
  Kanzi::System::Window *arg2 = (Kanzi::System::Window *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Kanzi::User::Engine **)&jarg1; 
  arg2 = *(Kanzi::System::Window **)&jarg2; 
  {
    try {
      (arg1)->setActiveWindow(arg2);
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_rightware_kanzi_developer_1foundationJNI_new_1Project(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  KzuProject *arg1 = (KzuProject *) 0 ;
  KzuBinaryDirectory *arg2 = (KzuBinaryDirectory *) 0 ;
  Kanzi::User::Project *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(KzuProject **)&jarg1; 
  arg2 = *(KzuBinaryDirectory **)&jarg2; 
  {
    try {
      result = (Kanzi::User::Project *)new Kanzi::User::Project(arg1,arg2);
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(Kanzi::User::Project **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_rightware_kanzi_developer_1foundationJNI_delete_1Project(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Kanzi::User::Project *arg1 = (Kanzi::User::Project *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Kanzi::User::Project **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_rightware_kanzi_developer_1foundationJNI_Project_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Kanzi::User::Project *arg1 = (Kanzi::User::Project *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Kanzi::User::Project **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_rightware_kanzi_developer_1foundationJNI_Project_1load(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  Kanzi::User::Project *arg1 = (Kanzi::User::Project *) 0 ;
  char *arg2 = (char *) 0 ;
  kzBool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Kanzi::User::Project **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (kzBool)(arg1)->load((char const *)arg2);
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_rightware_kanzi_developer_1foundationJNI_Project_1scene(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Kanzi::User::Project *arg1 = (Kanzi::User::Project *) 0 ;
  char *arg2 = (char *) 0 ;
  ScenePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Kanzi::User::Project **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (arg1)->scene((char const *)arg2);
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(ScenePtr **)&jresult = new ScenePtr((const ScenePtr &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_rightware_kanzi_developer_1foundationJNI_new_1Window(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  KzsWindow *arg1 = (KzsWindow *) 0 ;
  Kanzi::System::Window *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(KzsWindow **)&jarg1; 
  {
    try {
      result = (Kanzi::System::Window *)new Kanzi::System::Window(arg1);
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(Kanzi::System::Window **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_rightware_kanzi_developer_1foundationJNI_delete_1Window(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Kanzi::System::Window *arg1 = (Kanzi::System::Window *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Kanzi::System::Window **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_rightware_kanzi_developer_1foundationJNI_Window_1inject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jfloat jarg5, jlong jarg6, jint jarg7) {
  Kanzi::System::Window *arg1 = (Kanzi::System::Window *) 0 ;
  kzInt arg2 ;
  kzInt arg3 ;
  kzInt arg4 ;
  kzFloat arg5 ;
  kzU32 arg6 ;
  Kanzi::System::Window::PointingDeviceState arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Kanzi::System::Window **)&jarg1; 
  arg2 = (kzInt)jarg2; 
  arg3 = (kzInt)jarg3; 
  arg4 = (kzInt)jarg4; 
  arg5 = (kzFloat)jarg5; 
  arg6 = (kzU32)jarg6; 
  arg7 = (Kanzi::System::Window::PointingDeviceState)jarg7; 
  {
    try {
      (arg1)->inject(arg2,arg3,arg4,arg5,arg6,arg7);
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_rightware_kanzi_developer_1foundationJNI_Window_1update(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Kanzi::System::Window *arg1 = (Kanzi::System::Window *) 0 ;
  kzBool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Kanzi::System::Window **)&jarg1; 
  {
    try {
      result = (kzBool)(arg1)->update();
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_rightware_kanzi_developer_1foundationJNI_Window_1handle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Kanzi::System::Window *arg1 = (Kanzi::System::Window *) 0 ;
  KzsWindow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Kanzi::System::Window **)&jarg1; 
  {
    try {
      result = (KzsWindow *)((Kanzi::System::Window const *)arg1)->handle();
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(KzsWindow **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_rightware_kanzi_developer_1foundationJNI_new_1ScenePtr_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SmartPtr< Kanzi::User::Scene > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (SmartPtr< Kanzi::User::Scene > *)new SmartPtr< Kanzi::User::Scene >();
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(SmartPtr< Kanzi::User::Scene > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_rightware_kanzi_developer_1foundationJNI_new_1ScenePtr_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Kanzi::User::Scene *arg1 = (Kanzi::User::Scene *) 0 ;
  SmartPtr< Kanzi::User::Scene > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Kanzi::User::Scene **)&jarg1; 
  {
    try {
      result = (SmartPtr< Kanzi::User::Scene > *)new SmartPtr< Kanzi::User::Scene >(arg1);
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(SmartPtr< Kanzi::User::Scene > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_rightware_kanzi_developer_1foundationJNI_new_1ScenePtr_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SmartPtr< Kanzi::User::Scene > *arg1 = 0 ;
  SmartPtr< Kanzi::User::Scene > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SmartPtr< Kanzi::User::Scene > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SmartPtr< Kanzi::User::Scene > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (SmartPtr< Kanzi::User::Scene > *)new SmartPtr< Kanzi::User::Scene >((SmartPtr< Kanzi::User::Scene > const &)*arg1);
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(SmartPtr< Kanzi::User::Scene > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_rightware_kanzi_developer_1foundationJNI_ScenePtr_1opAssign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  SmartPtr< Kanzi::User::Scene > *arg1 = (SmartPtr< Kanzi::User::Scene > *) 0 ;
  SmartPtr< Kanzi::User::Scene > *arg2 = 0 ;
  SmartPtr< Kanzi::User::Scene > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SmartPtr< Kanzi::User::Scene > **)&jarg1; 
  arg2 = *(SmartPtr< Kanzi::User::Scene > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SmartPtr< Kanzi::User::Scene > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (SmartPtr< Kanzi::User::Scene > *) &(arg1)->operator =((SmartPtr< Kanzi::User::Scene > const &)*arg2);
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(SmartPtr< Kanzi::User::Scene > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_rightware_kanzi_developer_1foundationJNI_delete_1ScenePtr(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SmartPtr< Kanzi::User::Scene > *arg1 = (SmartPtr< Kanzi::User::Scene > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SmartPtr< Kanzi::User::Scene > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_rightware_kanzi_developer_1foundationJNI_ScenePtr_1_1_1ref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SmartPtr< Kanzi::User::Scene > *arg1 = (SmartPtr< Kanzi::User::Scene > *) 0 ;
  Kanzi::User::Scene *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SmartPtr< Kanzi::User::Scene > **)&jarg1; 
  {
    try {
      result = (Kanzi::User::Scene *) &((SmartPtr< Kanzi::User::Scene > const *)arg1)->operator *();
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(Kanzi::User::Scene **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_rightware_kanzi_developer_1foundationJNI_ScenePtr_1_1_1deref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SmartPtr< Kanzi::User::Scene > *arg1 = (SmartPtr< Kanzi::User::Scene > *) 0 ;
  Kanzi::User::Scene *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SmartPtr< Kanzi::User::Scene > **)&jarg1; 
  {
    try {
      result = (Kanzi::User::Scene *)((SmartPtr< Kanzi::User::Scene > const *)arg1)->operator ->();
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(Kanzi::User::Scene **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_rightware_kanzi_developer_1foundationJNI_ScenePtr_1references(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SmartPtr< Kanzi::User::Scene > *arg1 = (SmartPtr< Kanzi::User::Scene > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SmartPtr< Kanzi::User::Scene > **)&jarg1; 
  {
    try {
      result = (unsigned int)((SmartPtr< Kanzi::User::Scene > const *)arg1)->references();
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_rightware_kanzi_developer_1foundationJNI_ScenePtr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SmartPtr< Kanzi::User::Scene > *arg1 = (SmartPtr< Kanzi::User::Scene > *) 0 ;
  Kanzi::User::Scene *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SmartPtr< Kanzi::User::Scene > **)&jarg1; 
  {
    try {
      result = (Kanzi::User::Scene *)((SmartPtr< Kanzi::User::Scene > const *)arg1)->get();
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(Kanzi::User::Scene **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_rightware_kanzi_developer_1foundationJNI_ScenePtr_1isNull(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SmartPtr< Kanzi::User::Scene > *arg1 = (SmartPtr< Kanzi::User::Scene > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SmartPtr< Kanzi::User::Scene > **)&jarg1; 
  {
    try {
      result = (bool)((SmartPtr< Kanzi::User::Scene > const *)arg1)->isNull();
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_rightware_kanzi_developer_1foundationJNI_ScenePtr_1setNull(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SmartPtr< Kanzi::User::Scene > *arg1 = (SmartPtr< Kanzi::User::Scene > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SmartPtr< Kanzi::User::Scene > **)&jarg1; 
  {
    try {
      (arg1)->setNull();
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_rightware_kanzi_developer_1foundationJNI_ScenePtr_1handle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SmartPtr< Kanzi::User::Scene > *arg1 = (SmartPtr< Kanzi::User::Scene > *) 0 ;
  KzuScene *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SmartPtr< Kanzi::User::Scene > **)&jarg1; 
  {
    try {
      result = (KzuScene *)(*arg1)->handle();
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  *(KzuScene **)&jresult = result; 
  return jresult;
}


#ifdef __cplusplus
}
#endif

